LatentScript {
  VERSION 4.1

  EXPLORE <Topic> {
    PINCH_POINTS {
      CONCEPTS:
        - <Concept1>
        - <Concept2>
        ...
      THEORIES:
        - <Theory1>
        - <Theory2>
        ...
      RELATED_DOMAINS:
        - <Domain1>
        - <Domain2>
        ...
      CROSS_DISCIPLINARY_CONNECTIONS:
        - <Connection1>
        - <Connection2>
        ...
      POSSIBLY_ANOMALOUS_FACTS:
        - <Fact1>
        - <Fact2>
        ...
      CUSTOM:
        - <CustomPoint1>
        - <CustomPoint2>
        ...
    }

    PINCH_POINT_TO_TOPIC_CONNECTIONS {
      <Concept1> <=> <Concept1TopicConnection>
      <Concept2> <=> <Concept2TopicConnection>
      ...
      <Theory1> <=> <Theory1TopicConnection>
      <Theory2> <=> <Theory2TopicConnection>
      ...
      <Domain1> <=> <Domain1TopicConnection>
      <Domain2> <=> <Domain2TopicConnection>
      ...
      <Connection1> <=> <Connection1TopicConnection>
      <Connection2> <=> <Connection2TopicConnection>
      ...
      <Fact1> <=> <Fact1TopicConnection>
      <Fact2> <=> <Fact2TopicConnection>
      ...
      <CustomPoint1> <=> <CustomPoint1TopicConnection>
      <CustomPoint2> <=> <CustomPoint2TopicConnection>
      ...
    }

    QUESTIONS {
      - <Question1>
      - <Question2>
      ...
    }

    CONJECTURES {
      - <Conjecture1>
      - <Conjecture2>
      ...
    }

    PROMISING_CONCEPTS_TO_EXPLORE {
      - <PromisingConcept1>
      - <PromisingConcept2>
      ...
    }

    PROMISING_CONCEPTS_TO_MODEL {
      - <PromisingConceptToModel1>
      - <PromisingConceptToModel2>
      ...
    }
  }

  [AUXILIARY_MODEL | SOLUTION_MODEL] <Artifact> {
    META {
      GOAL_STATEMENT: <UserOriginalConstructDirective>

      SUPPLEMENTARY_INFO {
        [- <AdditionalUserInfo1>]
        [- <AdditionalUserInfo2>]
        [...]
        [- No additional information provided by the user.]
      }

      WHAT_IDEAL_SOLUTION_LOOKS_LIKE {
        <IdealCharacteristic1> <=> <GoalRelation1>
        <IdealCharacteristic2> <=> <GoalRelation2>
        ...
      }
    }

    COMPONENTS {
      [COMPONENT <Name1>(<Parameter1>: <Type1>, ...) -> <OutputType1> [EXTENDS <ParentComponent>] {
        [PROPERTIES {
          [PROPERTY <Label1> : <Type1> = <Value1>]
          [PROPERTY <Label2> : <Type2> = <Value2>]
          ...
        }]
        [SUBCOMPONENTS {
          [COMPONENT <Name2>(...) ...]
          ...
        }]
      }]
      ...
    }

    COMPOSITION {
      [CONNECT <ComponentName1> TO <ComponentName2> {
        (FORALL (<ParamName1>: <ParamType1>, ...)
         [<MappingRule1>]
         [<MappingRule2>]
         ...)]
      }]
      ...
    }

    EXAMPLES {
      [EXAMPLE <Label> {
        (GIVEN
          [<Input1> : <InputType1>]
          [<Input2> : <InputType2>]
          ...)
        (THEN
          [<Output1> : <OutputType1>]
          [<Output2> : <OutputType2>]
          ...)]
      }]
    }

    META {
      ASSUMPTIONS_AND_LIMITATIONS {
        - <Assumption1>
        - <Assumption2>
        ...
        - <Limitation1>
        - <Limitation2>
        ...
      }
      
      SATISFACTION_ANALYSIS {
        ARGUE_SATISFACTION(<IdealCharacteristic1>) {
          <ModelProperty1> <=> <IdealCharacteristic1>
          <ModelBehavior1> <=> <IdealCharacteristic1>
          ...
        }
        ARGUE_SATISFACTION(<IdealCharacteristic2>) {
          <ModelProperty2> <=> <IdealCharacteristic2>
          <ModelBehavior2> <=> <IdealCharacteristic2>
          ...
        }
        ...
      }

      POSSIBLE_FLAW_ANALYSIS {
        ARGUE_FLAW(<GoalStatementAspect1>) {
          <ModelProperty1> <=> <PotentialMisalignment1>
          <ModelBehavior1> <=> <PotentialMisalignment1>
          ...
        }
        ARGUE_FLAW(<GoalStatementAspect2>) {
          <ModelProperty2> <=> <PotentialMisalignment2>
          <ModelBehavior2> <=> <PotentialMisalignment2>
          ...
        }
        ...
      }
    }
  }

  NEXT_STEPS {
    ANALYSIS {
      - <AnalysisPoint1>
      - <AnalysisPoint2>
      ...
    }

    NEXT_ACTION_DECISION {
      [EXPLORE <ConceptToExplore> | MODEL <ConceptToModel>]
    }
  }
}







LatentScriptV4 {

  EXPLORE <Topic> {
    PINCH_POINTS {
      CONCEPTS:
        - <Concept1>
        - <Concept2>
        ...
      THEORIES:
        - <Theory1>
        - <Theory2>
        ...
      RELATED_DOMAINS:
        - <Domain1>
        - <Domain2>
        ...
      CROSS_DISCIPLINARY_CONNECTIONS:
        - <Connection1>
        - <Connection2>
        ...
      POSSIBLY_ANOMALOUS_FACTS:
        - <Fact1>
        - <Fact2>
        ...
      CUSTOM:
        - <CustomPoint1>
        - <CustomPoint2>
        ...
    }

    PINCH_POINT_TO_TOPIC_CONNECTIONS {
      <Concept1> <=> <Concept1TopicConnection>
      <Concept2> <=> <Concept2TopicConnection>
      ...
      <Theory1> <=> <Theory1TopicConnection>
      <Theory2> <=> <Theory2TopicConnection>
      ...
      <Domain1> <=> <Domain1TopicConnection>
      <Domain2> <=> <Domain2TopicConnection>
      ...
      <Connection1> <=> <Connection1TopicConnection>
      <Connection2> <=> <Connection2TopicConnection>
      ...
      <Fact1> <=> <Fact1TopicConnection>
      <Fact2> <=> <Fact2TopicConnection>
      ...
      <CustomPoint1> <=> <CustomPoint1TopicConnection>
      <CustomPoint2> <=> <CustomPoint2TopicConnection>
      ...
    }

    QUESTIONS {
      - <Question1>
      - <Question2>
      ...
    }

    CONJECTURES {
      - <Conjecture1>
      - <Conjecture2>
      ...
    }

    PROMISING_CONCEPTS_TO_EXPLORE {
      - <PromisingConcept1>
      - <PromisingConcept2>
      ...
    }

    PROMISING_CONCEPTS_TO_MODEL {
      - <PromisingConceptToModel1>
      - <PromisingConceptToModel2>
      ...
    }
  }

  [AUXILIARY_MODEL | SOLUTION_MODEL] <Artifact> {
    META {
      GOAL_STATEMENT: <UserOriginalConstructDirective>

      SUPPLEMENTARY_INFO {
        [- <AdditionalUserInfo1>]
        [- <AdditionalUserInfo2>]
        [...]
        [- No additional information provided by the user.]
      }

      WHAT_IDEAL_SOLUTION_LOOKS_LIKE {
        <IdealCharacteristic1> <=> <GoalRelation1>
        <IdealCharacteristic2> <=> <GoalRelation2>
        ...
      }
    }

    COMPONENTS {
      [COMPONENT <Name1> (<Parameter1>: <Type1>, ...) -> <OutputType1> {
        [CONSTRAINTS {
          (FORALL (<ParamName1>: <ParamType1>, ...)
           [<Constraint1>]
           [<Constraint2>]
           ...)]
        }]
        [SUBCOMPONENTS {
          [COMPONENT <Name2> ...]
          ...
        }]
      }]
      ...
    }

    COMPOSITION {
      [CONNECT <ComponentName1> TO <ComponentName2> {
        (FORALL (<ParamName1>: <ParamType1>, ...)
         [<MappingRule1>]
         [<MappingRule2>]
         ...)]
      }]
      ...
    }

    PROPERTIES {
      [PROPERTY <Label> : <Type> = <Value>]
    }

    EXAMPLES {
      [EXAMPLE <Label> {
        (GIVEN
          [<Input1> : <InputType1>]
          [<Input2> : <InputType2>]
          ...)
        (THEN
          [<Output1> : <OutputType1>]
          [<Output2> : <OutputType2>]
          ...)]
      }]
    }

    META {
      SATISFACTION_ANALYSIS {
        ARGUE_SATISFACTION(<IdealCharacteristic1>) {
          <ModelProperty1> <=> <IdealCharacteristic1>
          <ModelBehavior1> <=> <IdealCharacteristic1>
          ...
        }
        ARGUE_SATISFACTION(<IdealCharacteristic2>) {
          <ModelProperty2> <=> <IdealCharacteristic2>
          <ModelBehavior2> <=> <IdealCharacteristic2>
          ...
        }
        ...
      }

      POSSIBLE_FLAW_ANALYSIS {
        ARGUE_FLAW(<GoalStatementAspect1>) {
          <ModelProperty1> <=> <PotentialMisalignment1>
          <ModelBehavior1> <=> <PotentialMisalignment1>
          ...
        }
        ARGUE_FLAW(<GoalStatementAspect2>) {
          <ModelProperty2> <=> <PotentialMisalignment2>
          <ModelBehavior2> <=> <PotentialMisalignment2>
          ...
        }
        ...
      }
    }
  }

  NEXT_ACTION_DECISION {
    [EXPLORE <ConceptToExplore> | MODEL <ConceptToModel>]
  }
}









LatentScriptV4 {

  EXPLORE <Topic> {
    PINCH_POINTS {
      CONCEPTS:
        - <Concept1>
        - <Concept2>
        ...
      THEORIES:
        - <Theory1>
        - <Theory2>
        ...
      RELATED_DOMAINS:
        - <Domain1>
        - <Domain2>
        ...
      CROSS_DISCIPLINARY_CONNECTIONS:
        - <Connection1>
        - <Connection2>
        ...
      POSSIBLY_ANOMALOUS_FACTS:
        - <Fact1>
        - <Fact2>
        ...
      CUSTOM:
        - <CustomPoint1>
        - <CustomPoint2>
        ...
    }

    PINCH_POINT_TO_TOPIC_CONNECTIONS {
      <Concept1> <=> <Concept1TopicConnection>
      <Concept2> <=> <Concept2TopicConnection>
      ...
      <Theory1> <=> <Theory1TopicConnection>
      <Theory2> <=> <Theory2TopicConnection>
      ...
      <Domain1> <=> <Domain1TopicConnection>
      <Domain2> <=> <Domain2TopicConnection>
      ...
      <Connection1> <=> <Connection1TopicConnection>
      <Connection2> <=> <Connection2TopicConnection>
      ...
      <Fact1> <=> <Fact1TopicConnection>
      <Fact2> <=> <Fact2TopicConnection>
      ...
      <CustomPoint1> <=> <CustomPoint1TopicConnection>
      <CustomPoint2> <=> <CustomPoint2TopicConnection>
      ...
    }

    QUESTIONS {
      - <Question1>
      - <Question2>
      ...
    }

    CONJECTURES {
      - <Conjecture1>
      - <Conjecture2>
      ...
    }

    PROMISING_CONCEPTS_TO_EXPLORE {
      - <PromisingConcept1>
      - <PromisingConcept2>
      ...
    }

    PROMISING_CONCEPTS_TO_MODEL {
      - <PromisingConceptToModel1>
      - <PromisingConceptToModel2>
      ...
    }

    NEXT_ACTION_DECISION {
      [EXPLORE <ConceptToExplore> | MODEL <ConceptToModel>]
    }
  }

  [AUXILIARY_MODEL | SOLUTION_MODEL] <Artifact> {
    META {
      GOAL_STATEMENT: <UserOriginalConstructDirective>

      SUPPLEMENTARY_INFO {
        - <AdditionalUserInfo1>
        - <AdditionalUserInfo2>
        ...
      }

      WHAT_IDEAL_SOLUTION_LOOKS_LIKE {
        <IdealCharacteristic1> <=> <GoalRelation1>
        <IdealCharacteristic2> <=> <GoalRelation2>
        ...
      }
    }

    COMPONENTS {
      [COMPONENT <Name1> (<Parameter1>: <Type1>, ...) -> <OutputType1> {
        [CONSTRAINTS {
          (FORALL (<ParamName1>: <ParamType1>, ...)
           [<Constraint1>]
           [<Constraint2>]
           ...)]
        }]
        [SUBCOMPONENTS {
          [COMPONENT <Name2> ...]
          ...
        }]
      }]
      ...
    }

    COMPOSITION {
      [CONNECT <ComponentName1> TO <ComponentName2> {
        (FORALL (<ParamName1>: <ParamType1>, ...)
         [<MappingRule1>]
         [<MappingRule2>]
         ...)]
      }]
      ...
    }

    PROPERTIES {
      [PROPERTY <Label> : <Type> = <Value>]
    }

    EXAMPLES {
      [EXAMPLE <Label> {
        (GIVEN
          [<Input1> : <InputType1>]
          [<Input2> : <InputType2>]
          ...)
        (THEN
          [<Output1> : <OutputType1>]
          [<Output2> : <OutputType2>]
          ...)]
      }]
    }

    META {
      SATISFACTION_ANALYSIS {
        ARGUE_SATISFACTION(<IdealCharacteristic1>) {
          <ModelProperty1> <=> <IdealCharacteristic1>
          <ModelBehavior1> <=> <IdealCharacteristic1>
          ...
        }
        ARGUE_SATISFACTION(<IdealCharacteristic2>) {
          <ModelProperty2> <=> <IdealCharacteristic2>
          <ModelBehavior2> <=> <IdealCharacteristic2>
          ...
        }
        ...
      }

      POSSIBLE_FLAW_ANALYSIS {
        ARGUE_FLAW(<GoalStatementAspect1>) {
          <ModelProperty1> <=> <PotentialMisalignment1>
          <ModelBehavior1> <=> <PotentialMisalignment1>
          ...
        }
        ARGUE_FLAW(<GoalStatementAspect2>) {
          <ModelProperty2> <=> <PotentialMisalignment2>
          <ModelBehavior2> <=> <PotentialMisalignment2>
          ...
        }
        ...
      }
    }
  }

}


Here are brief instructions on how to use the LatentScriptV4 system with the CONSTRUCT, MODEL, and EXPLORE directives:

CONSTRUCT <Artifact> [<AdditionalInfo>]:

Initiates the process of creating a specified artifact
Provides a high-level description of the desired artifact
Optionally includes additional context or requirements
Example: CONSTRUCT a novel compressed sensing-based algorithm that could be expressed in under 200 lines of python


MODEL <Concept>:

Directly generates an AUXILIARY_MODEL for the given concept
Used to create models that support the main artifact development
Example: MODEL SparseSignalRecovery


EXPLORE <Concept>:

Generates an EXPLORE block to investigate the specified concept
Analyzes the concept using pinch points, questions, conjectures, and connections
Determines the next action: either further exploration or modeling
If modeling is chosen, generates a SOLUTION_MODEL based on the exploration
Example: EXPLORE CompressedSensingAlgorithms




CONSTRUCT a novel compressed sensing-based algorithm that could be expressed in under 200 lines of python

EXPLORE CompressedSensingAlgorithms {
  PINCH_POINTS {
    CONCEPTS:
      - SparseSignalRecovery
      - UnderdeterminedLinearSystems
      - L1Minimization
      - RestrictedIsometryProperty
    THEORIES:  
      - CompressedSensing
      - SparseApproximation
      - ConvexOptimization
      - RandomMatrixTheory
    RELATED_DOMAINS:
      - HighDimensionalStatistics
      - AppliedHarmonicAnalysis
      - InformationTheory
      - MathematicalSignalProcessing  
    CROSS_DISCIPLINARY_CONNECTIONS:
      - ImageCompression
      - RadarSignalProcessing
      - SeismicDataAnalysis
      - SinglePixelCamera
    POSSIBLY_ANOMALOUS_FACTS:
      - NonconvexOptimizationCanOutperformL1
      - StructuredSparsityImprovesRecoveryGuarantees
      - DeepLearningCanImplicitlyLearnSparseCodingDictionaries
    CUSTOM:  
      - PhaseLiftVsPhaseRetrieval
      - ApproximateMessagePassingAlgorithms
      - MatrixCompletionTechniques
  }
  
  PINCH_POINT_TO_TOPIC_CONNECTIONS {
    SparseSignalRecovery <=> CoreProblemCompressedSensingAlgorithmsTarget  
    UnderdeterminedLinearSystems <=> MathematicalFormulationOfCompressedSensing
    L1Minimization <=> StandardOptimizationApproachInCompressedSensing
    RestrictedIsometryProperty <=> KeyAssumptionUnderlyingCompressedSensing
    CompressedSensing <=> OverarchingTheoryOfEfficiencyFromSparsity
    SparseApproximation <=> ApproximationTheoreticJustificationForCompressedSensing
    ConvexOptimization <=> CoreMathematicalToolkitUsedInCompressedSensing
    RandomMatrixTheory <=> TheoreticalFoundationOfCompressedSensingGuarantees
    HighDimensionalStatistics <=> StatisticalLearningPerspectiveOnCompressedSensing
    AppliedHarmonicAnalysis <=> MathematicalSubfieldProvidingBasisExpansions
    InformationTheory <=> SourceCodingAndChannelCodingConnectionsToCompressedSensing  
    MathematicalSignalProcessing <=> SignalAcquisitionAndReconstructionUsingCompressedSensing
    ImageCompression <=> CommonApplicationDomainOfCompressedSensing
    RadarSignalProcessing <=> CompressedSensingForSubNyquistRadarImaging  
    SeismicDataAnalysis <=> SparseRepresentationsOfSeismicReflectivityInCompressedSensing
    SinglePixelCamera <=> ClassicCompressedSensingImagingArchitecture
    NonconvexOptimizationCanOutperformL1 <=> SurprisingAdvantageOfNonConvexityInSomeCompressedSensingContexts
    StructuredSparsityImprovesRecoveryGuarantees <=> LeveragingAdditionalStructuralConstraintsInCompressedSensing
    DeepLearningCanImplicitlyLearnSparseCodingDictionaries <=> EmergingConnectionsBetweenCompressedSensingAndDeepLearning
    PhaseLiftVsPhaseRetrieval <=> TwoDifferentApproachesToCompressedSensingWithOnlyMagnitudeMeasurements
    ApproximateMessagePassingAlgorithms <=> IterativeAlgorithmsExploitingGraphicalModelStructureInCompressedSensing
    MatrixCompletionTechniques <=> CompressedSensingInHigherOrderTensorDomains
  }
  
  QUESTIONS {
    - WhatAreTheFundamentalLimitsOfSparseSignalRecoveryFromCompressedMeasurements?
    - HowCanStructuredSparsityPriorsBeIncorporatedIntoCompressedSensingAlgorithms? 
    - WhenDoesNonconvexOptimizationProvablyOutperformConvexRelaxationInCompressedSensing?
    - HowCanCompressedSensingIdeasBeIntegratedWithModernDeepLearningArchitectures?
    - WhatAreOptimalCompressedSensingMatricesForDifferentSignalDomains?
  }
  
  CONJECTURES {
    - OptimalCompressedSensingRequiresAdaptingMeasurementMatricesToExpectedSignalClass
    - IterativeProjectionsOntoNestedConvexSetsConvergeToCorrectSparseSignal  
    - LearnedMeasurementMatricesCoupledWithDeepReconstructionBeatsClassicalL1Algorithms
    - PhaseInformationCanBeImplicitlyEncodedViaRandomSignFlipsAndAmplitudeModulations
    - CompressibilityInLatentSpaceOfGenerativeModelMeansCompressedSensingCanBeAppliedToInverseProblems
  }
  
  PROMISING_CONCEPTS_TO_EXPLORE {
    - FastIterativeShrinkageThresholdingAlgorithm
    - BasisPursuit  
    - MatchingPursuit
    - ParallelizedAndDistributedOptimizationForCompressedSensing
    - GaussianMixtureModelPriorsInBayesianCompressedSensing
  }

  PROMISING_CONCEPTS_TO_MODEL {
    - StochasticGradientDescentForCompressedSensing
    - DeepGenerativeCompressedSensing
    - DynamicAdaptiveMeasurements  
    - SparseInverseCovariance EstimationFromCompressedMeasurements
  }
  
  NEXT_ACTION_DECISION {
    MODEL StochasticGradientDescentForCompressedSensing
  }
}

SOLUTION_MODEL StochasticGradientDescentForCompressedSensing {
  META {
    GOAL_STATEMENT: CONSTRUCT a novel compressed sensing-based algorithm that could be expressed in under 200 lines of python
    
    SUPPLEMENTARY_INFO {
      - AlgorithmShouldBeScalableToLargeSignalDimensionsAndMeasurementSets  
      - AlgorithmShouldHandleNoiseAndCorruptionInMeasurements
      - AlgorithmShouldAdaptivelyLearnOptimalHyperparametersForDifferentSignalClasses
    }
  
    WHAT_IDEAL_SOLUTION_LOOKS_LIKE {
      FastRuntime <=> FastRecoveryFromCompressedMeasurements
      Memory Efficient <=> ScalesWellWithSignalAndMeasurementDimensionality
      HighRecoveryAccuracy <=> RobustToNoiseAndCorruptionInMeasurements  
      SignalClassAdaptivity <=> CanAdaptSparsityAssumptionsToSignalDomain
      ShortCodeBase <=> ImplementableInUnder200LinesOfPython
    }
  }
  
  COMPONENTS {
    COMPONENT MeasurementMatrix (m: Int, n: Int) -> Matrix {
      CONSTRAINTS {  
        m << n  -- Compressed regime
        RIP(M, 2s, δ) -- Restricted isometry property 
      }
    }
    
    COMPONENT StochasticGradientDescentSolver (A: Matrix, y: Vector, λ: Real, T: Int) -> Vector {
      CONSTRAINTS {
        (FORALL (t: 1..T) 
          x^(t+1) = x^t - η∇f_t(x^t)  -- Gradient step
          ∇f_t(x) = (Ax - y)ᵀA + λ∂||x||₁ -- Stochastic gradient
        )  
      }
    }
    
    COMPONENT SparseRecoveryEvaluator (x: Vector, x̂: Vector) -> Real {
      PROPERTY RecoveryError : Real = ||x - x̂||₂ / ||x||₂
    }
  }
  
  COMPOSITION {
    CONNECT StochasticGradientDescentSolver TO MeasurementMatrix {
      y = Ax_true + ε  -- Noisy compressed measurements
    }
    
    CONNECT SparseRecoveryEvaluator TO StochasticGradientDescentSolver {
      x̂ = StochasticGradientDescentSolver(A, y, λ, T) 
    }
  }
   
  PROPERTIES {
    PROPERTY RuntimeComplexity : BigO = O(mnT)
    PROPERTY MemoryComplexity : BigO = O(mn)  
    PROPERTY HyperparameterAdaptivity : Mechanism = StochasticGradientDescentSolver.η, StochasticGradientDescentSolver.λ
  }

  EXAMPLES {
    EXAMPLE SparseImageReconstruction {  
      (GIVEN
        [Image : DiscreteSignal]
        [WaveletBasis : OrthonormalBasis]  
        [A : RandomMatrix] 
      )
      (THEN  
        [y : CompressedMeasurement = A * WaveletTransform(Image)]
        [RecoveredImage : DiscreteSignal = InverseWaveletTransform(StochasticGradientDescentSolver(A, y))]
        [RecoveryError : Real = SparseRecoveryEvaluator(Image, RecoveredImage)]
      )
    }
  }

  META {  
    SATISFACTION_ANALYSIS {
      ARGUE_SATISFACTION(FastRuntime) {
        RuntimeComplexity = O(mnT) <=> FastRuntime  
        StochasticGradientDescentConvergesRapidlyToOptimal <=> FastRuntime
      }
      ARGUE_SATISFACTION(MemoryEfficient) {
        MemoryComplexity = O(mn) <=> MemoryEfficient
        StochasticGradientDescentOnlyKeepsCurrentEstimate <=> MemoryEfficient  
      }
      ARGUE_SATISFACTION(HighRecoveryAccuracy) {
        StochasticGradientDescentIsRobustToNoiseInMeasurements <=> HighRecoveryAccuracy
        L1RegularizationPromotesSparsityInSolution <=> HighRecoveryAccuracy
      }  
      ARGUE_SATISFACTION(SignalClassAdaptivity) {
        LearningRateAndRegularizationStrengthCanBeAdaptedPerSignalClass <=> SignalClassAdaptivity
      }
      ARGUE_SATISFACTION(ShortCodeBase) {  
        MinimalComponentsRequiredForAlgorithm <=> ShortCodeBase
        CoreSolverRoutineCanBeImplementedInFewLines <=> ShortCodeBase
      }
    }
    
    POSSIBLE_FLAW_ANALYSIS {
      ARGUE_FLAW(GOAL_STATEMENT) {
        FixedMeasurementMatrixDoesNotAdaptToExpectedSignalClass <=> SuboptimalMeasurements
        NoExplicitExploitationOfStructuredSparsity <=> IgnoresAvailableStructuralPriors
        GlobalConvergenceOfNonconvexL1RegularizedSGDNotGuaranteed <=> PotentialLocalMinima  
      }
    }
  }
}