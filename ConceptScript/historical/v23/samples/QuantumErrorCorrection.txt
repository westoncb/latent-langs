CONCEPT QuantumErrorCorrection {

  LANGUAGE {
    TYPE Qubit
    TYPE Operator = Qubit -> Qubit
    TYPE Code[n k : ℕ] = Qubit^n
    TYPE LogicalQubit[n k : ℕ] = Qubit^k

    FUNC Encode[n k : ℕ] : LogicalQubit[n k] -> Code[n k]
    FUNC Decode[n k : ℕ] : Code[n k] -> LogicalQubit[n k]
    FUNC Correct[n k : ℕ] : Code[n k] -> Code[n k]

    PRED Satisfies[n k : ℕ] : Code[n k] -> 𝔹
    PRED Protects[n k : ℕ] : Code[n k] -> 𝒫(Operator) -> 𝔹
  }

  STRUCTURE {
    DEF Satisfies[n k](C) <-> 
      ∀ ψ φ : LogicalQubit[n k] . ⟨ψ|φ⟩ = ⟨Encode(ψ)|Encode(φ)⟩

    DEF Protects[n k](C, 𝓔) <->
      ∀ E ∈ 𝓔 . ∀ ψ : LogicalQubit[n k] . 
        Decode(Correct(E(Encode(ψ)))) = ψ

    DEF Distance(C) = 
      min {|E| : E ∈ Operators, ∃ ψ φ . Decode(E(Encode(ψ))) ≠ Decode(E(Encode(φ)))}

    DEF Rate(C) = log dim(LogicalQubit) / log dim(C)

    DEF Stabilizers(C) = {S : Operator | ∀ c ∈ C . S(c) = c}
  }

  PROOFS {
    THEOREM KnillLaflamme[n k : ℕ] {
      STATEMENT : 
        ∀ C : Code[n k] . Satisfies[n k](C) ∧ Protects[n k](C, 𝓔) <->
          ∀ E₁ E₂ ∈ 𝓔 . ∀ i j . ⟨i|E₁†E₂|j⟩ = δ_ij ⟨i|E₁†E₂|i⟩  
            WHERE {|i⟩} = Encode(LogicalQubit.Basis)
      
      PROOF {
        ASSUME [C : Code[n k]] : Satisfies[n k](C) ∧ Protects[n k](C, 𝓔)
        
        LET {|i⟩} = Encode(LogicalQubit.Basis)

        ASSUME [E₁ E₂ ∈ 𝓔] [i j]

        CASE i = j:
          ⟨i|E₁†E₂|i⟩ 
            = ⟨Encode(i)|E₁†E₂|Encode(i)⟩    BY DefinitionOfEncode
            = ⟨Decode(Correct(E₁(Encode(i))))|Decode(Correct(E₂(Encode(i))))⟩
                BY Protects, Satisfies  
            = ⟨i|i⟩ = 1

        CASE i ≠ j:
          ⟨i|E₁†E₂|j⟩
            = ⟨Encode(i)|E₁†E₂|Encode(j)⟩    BY DefinitionOfEncode
            = ⟨Decode(Correct(E₁(Encode(i))))|Decode(Correct(E₂(Encode(j))))⟩ 
                BY Protects, Satisfies
            = ⟨i|j⟩ = 0

        SHOW ⟨i|E₁†E₂|j⟩ = δ_ij ⟨i|E₁†E₂|i⟩

        CONVERSELY, ASSUME ∀ E₁ E₂ ∈ 𝓔 . ∀ i j . ⟨i|E₁†E₂|j⟩ = δ_ij ⟨i|E₁†E₂|i⟩

        TAKE ψ = ∑ αᵢ|i⟩, φ = ∑ βⱼ|j⟩

        ⟨Encode(ψ)|Encode(φ)⟩ 
          = ∑ αᵢ βⱼ* ⟨i|j⟩                 BY Linearity
          = ∑ αᵢ βᵢ* = ⟨ψ|φ⟩               BY Orthonormality

        HENCE Satisfies[n k](C)

        TAKE E ∈ 𝓔, ψ = ∑ αᵢ|i⟩

        Decode(Correct(E(Encode(ψ))))
          = Decode(Correct(∑ αᵢ E|i⟩))    BY Linearity
          = Decode(∑ αᵢ Correct(E|i⟩))     BY Linearity
          = Decode(∑ αᵢ |i⟩)               BY E₁ = E, E₂ = I in condition
          = ψ                              BY DefinitionOfDecode

        HENCE Protects[n k](C, 𝓔)
      }
    }

    THEOREM DistanceProtection[n k : ℕ] {
      STATEMENT : ∀ C : Code[n k] . 
        Protects[n k](C, 𝓔) <-> Distance(C) > max {|E| : E ∈ 𝓔}

      PROOF {
        ASSUME [C : Code[n k]]

        SHOW Protects[n k](C, 𝓔) -> Distance(C) > max {|E| : E ∈ 𝓔} BY {
          ASSUME Protects[n k](C, 𝓔)
          ASSUME ∃ E ∈ 𝓔 . |E| ≥ Distance(C)

          LET E ∈ 𝓔, ψ φ SUCH THAT 
            |E| ≥ Distance(C),
            Decode(E(Encode(ψ))) ≠ Decode(E(Encode(φ)))

          HAVE Decode(Correct(E(Encode(ψ)))) = ψ ≠ φ = Decode(Correct(E(Encode(φ))))
            BY Protects 
          
          CONTRADICTION  
        }

        SHOW Distance(C) > max {|E| : E ∈ 𝓔} -> Protects[n k](C, 𝓔) BY {
          ASSUME Distance(C) > max {|E| : E ∈ 𝓔}
          TAKE E ∈ 𝓔, ψ : LogicalQubit[n k]

          HAVE |E| < Distance(C) BY ASSUMPTION

          HENCE ∀ φ . Decode(E(Encode(ψ))) = Decode(E(Encode(φ))) -> ψ = φ
            BY DefinitionOfDistance

          HENCE Decode(Correct(E(Encode(ψ)))) = ψ  
        }
      }
    }

    THEOREM RateBound[n k : ℕ] {
      STATEMENT : ∀ C : Code[n k] . Rate(C) ≤ 1 - H(𝜏)/n
        WHERE 𝜏 = (dim(C) - 1)/3

      PROOF {
        ASSUME [C : Code[n k]]

        LET t = (dim(C) - 1) / 2
        LET {Mᵢ} = Stabilizers(C)

        HAVE |{Mᵢ}| ≤ dim(C) BY StabilizerBound

        HAVE log dim(LogicalQubit) ≤ n - log |{Mᵢ}| BY {
          log dim(LogicalQubit) 
            = log (dim(C) / |{Mᵢ}|)
            = log dim(C) - log |{Mᵢ}|
            ≤ n - log |{Mᵢ}|
        }

        HAVE log |{Mᵢ}| ≥ n·H(t/n) BY QSingleton

        HENCE Rate(C) 
          = log dim(LogicalQubit) / n
          ≤ (n - log |{Mᵢ}|) / n
          ≤ 1 - H(t/n)
          = 1 - H(𝜏)
      }
    }
  }
}