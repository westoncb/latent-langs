CONCEPT NPCompleteness {

  LANGUAGE {
    TYPE Problem
    TYPE Instance
    TYPE Solution
    TYPE Complexity
    TYPE PolynomialTime <: Complexity
    TYPE VerificationAlgorithm <: PolynomialTime

    PRED IsSolvable : Problem -> Instance -> Solution -> ùîπ
    PRED IsVerifiable : Problem -> Instance -> Solution -> ùîπ
    PRED IsPolynomiallyVerifiable : Problem -> ùîπ
    PRED IsPolynomiallyReducible : Problem -> Problem -> ùîπ
    PRED IsNPComplete : Problem -> ùîπ

    FUNC Reduce : Problem -> Problem -> Instance -> Instance
    FUNC Verify : Problem -> Instance -> Solution -> ùîπ

    NOTATION "A ‚â§_p B" = IsPolynomiallyReducible(A, B)
    NOTATION "NP" = { P : Problem | IsPolynomiallyVerifiable(P) }
  }

  STRUCTURE {
    DEF IsPolynomiallyVerifiable(P) = 
      ‚àÉ (V : VerificationAlgorithm) . 
        ‚àÄ (I : Instance) (S : Solution) . 
          Verify(P, I, S) = IsSolvable(P, I, S)

    DEF IsPolynomiallyReducible(A, B) =
      ‚àÉ (F : PolynomialTime) .
        ‚àÄ (I : Instance) .
          IsSolvable(A, I, _) <-> IsSolvable(B, Reduce(A, B, I), _)

    DEF IsNPComplete(P) =
      (P ‚àà NP) ‚àß (‚àÄ (Q : Problem) . (Q ‚àà NP) -> (Q ‚â§_p P))

    AXIOM NPContainsNPComplete :
      ‚àÉ (P : Problem) . IsNPComplete(P)
  }

  PROOFS {
    THEOREM PolynomialVerifiabilityOfNPComplete {
      STATEMENT : ‚àÄ (P : Problem) . IsNPComplete(P) -> IsPolynomiallyVerifiable(P)

      PROOF {
        ASSUME [P : Problem] : IsNPComplete(P)

        HAVE : P ‚àà NP BY {
          ASSUME IsNPComplete(P)
          SHOW P ‚àà NP BY NPCompleteDefinition
        }

        SHOW IsPolynomiallyVerifiable(P) BY {
          ASSUME P ‚àà NP
          SHOW ‚àÉ (V : VerificationAlgorithm) .
            ‚àÄ (I : Instance) (S : Solution) .
              Verify(P, I, S) = IsSolvable(P, I, S)
          BY PolynomialVerifiabilityDefinition
        }
      }
    }

    THEOREM TransitivityOfReduction {
      STATEMENT : ‚àÄ (A B C : Problem) . (A ‚â§_p B) ‚àß (B ‚â§_p C) -> (A ‚â§_p C)

      PROOF {
        ASSUME [A B C : Problem] : (A ‚â§_p B) ‚àß (B ‚â§_p C)

        HAVE [F : PolynomialTime] : 
          ‚àÄ (I : Instance) . 
            IsSolvable(A, I, _) <-> IsSolvable(B, Reduce(A, B, I), _)
        BY PolynomialReducibilityDefinition

        HAVE [G : PolynomialTime] :
          ‚àÄ (J : Instance) .
            IsSolvable(B, J, _) <-> IsSolvable(C, Reduce(B, C, J), _)  
        BY PolynomialReducibilityDefinition

        LET H : PolynomialTime = Œª (I : Instance) . Reduce(B, C, Reduce(A, B, I))

        SHOW ‚àÄ (I : Instance) .
          IsSolvable(A, I, _) <-> IsSolvable(C, Reduce(A, C, I), _)
        BY {
          ASSUME [I : Instance]
          
          HAVE : IsSolvable(A, I, _) <-> IsSolvable(B, Reduce(A, B, I), _) BY F
          HAVE : IsSolvable(B, Reduce(A, B, I), _) <-> 
                 IsSolvable(C, Reduce(B, C, Reduce(A, B, I)), _) BY G

          LET J : Instance = Reduce(A, B, I)
          HAVE : Reduce(A, C, I) = H(I) = Reduce(B, C, J) BY {
            Reduce(A, C, I) 
            = Reduce(B, C, Reduce(A, B, I))  BY H
            = Reduce(B, C, J)                BY J
          }

          HENCE IsSolvable(A, I, _) <-> IsSolvable(C, Reduce(A, C, I), _)
        }

        SHOW A ‚â§_p C BY PolynomialReducibilityDefinition
      }
    }

    THEOREM NPHardnessOfNPComplete {
      STATEMENT : ‚àÄ (P : Problem) . IsNPComplete(P) -> 
                  ‚àÄ (Q : Problem) . (Q ‚àà NP) -> (Q ‚â§_p P)

      PROOF {
        ASSUME [P : Problem] : IsNPComplete(P)
        ASSUME [Q : Problem] : Q ‚àà NP

        HAVE : ‚àÄ (R : Problem) . (R ‚àà NP) -> (R ‚â§_p P) BY {
          ASSUME IsNPComplete(P)
          SHOW ‚àÄ (R : Problem) . (R ‚àà NP) -> (R ‚â§_p P) 
          BY NPCompleteDefinition
        }

        SHOW Q ‚â§_p P BY {
          HAVE : Q ‚àà NP BY ASSUMPTION
          HENCE Q ‚â§_p P BY MODUS_PONENS
        }
      }
    }

    THEOREM NPCompleteImpliesNPHard {
      STATEMENT : ‚àÄ (P : Problem) . IsNPComplete(P) -> 
                  ‚àÄ (Q : Problem) . (Q ‚àà NP) -> (Q ‚â§_p P)

      PROOF {
        ASSUME [P : Problem] : IsNPComplete(P)

        SHOW ‚àÄ (Q : Problem) . (Q ‚àà NP) -> (Q ‚â§_p P) BY {
          ASSUME [Q : Problem] : Q ‚àà NP

          HAVE : IsNPComplete(P) BY ASSUMPTION

          SHOW Q ‚â§_p P BY NPHardnessOfNPComplete
        }
      }  
    }
  }
}