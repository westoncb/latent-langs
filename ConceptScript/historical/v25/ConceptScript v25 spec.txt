ConceptScript v25

<Concept> ::= "CONCEPT" <ConceptName> ["[" <Params> "]"] [":" <ParentConcept>] "{"
               <Language>
               <Structure>*
               <Proofs>
             "}"
<Language> ::= "LANGUAGE" "{"
                 (<TypeDecl> | <ConstDecl> | <FuncDecl> | <PredDecl> |
                  <RewriteDecl> | <AxiomDecl> | <NotationDecl>)*
               "}"
<TypeDecl> ::= "TYPE" <TypeName> ["[" <Params> "]"] ["<:" <TypeName>] "=" <Type>
<Type> ::= <TypeName> ["(" <Type> ("," <Type>)* ")"]
         | "(" <Type> ("," <Type>)* ")"
         | <Type> "->" <Type>
         | <Type> "|" <Type>
<ConstDecl> ::= "CONST" <ConstName> ":" <Type>
<FuncDecl> ::= "FUNC" <FuncName> ["[" <Params> "]"] ":" <Type>
<PredDecl> ::= "PRED" <PredName> ["[" <Params> "]"] ":" <Type>
<RewriteDecl> ::= "REWRITE" <Pattern> "=" <Expression>
<AxiomDecl> ::= "AXIOM" <AxiomName> ["[" <Params> "]"] ":" <Formula>
<NotationDecl> ::= "NOTATION" <Notation> "=" <Expression>
<Structure> ::= "STRUCTURE" [<StructureName>] ["(" <Params> ")"] "{"
                  (<LetDecl> | <DefDecl> | <Requirement>)*
                "}"
<LetDecl> ::= "LET" <Pattern> [":" <Type>] "=" <Expression>
<DefDecl> ::= "DEF" <Pattern> [":" <Type>] "=" <Expression> ["WHERE" <Constraint>]
<Requirement> ::= "REQUIRE" <Expression>
<Pattern> ::= <Identifier>
            | "(" <Pattern> ("," <Pattern>)* ")"
<Proofs> ::= "PROOFS" "{"
               (<TacticDecl> | <TheoremDecl>)*
             "}"
<TacticDecl> ::= "TACTIC" <TacticName> ["[" <Params> "]"] "=" <Tactic>
<TheoremDecl> ::= "THEOREM" <TheoremName> ["[" <Params> "]"] "{"
                    "STATEMENT" ":" <Formula>
                    "PROOF" ":" <Proof>
                  "}"
<Proof> ::= <ProofStep> (";" <ProofStep>)*
<ProofStep> ::= <LetStep>
              | <HaveStep>
              | <ShowStep>
              | <ByStep>
              | <QedStep>
<LetStep> ::= "LET" <Pattern> [":" <Type>] "=" <Expression>
<HaveStep> ::= "HAVE" <Formula> ["BY" <Tactic>]
<ShowStep> ::= "SHOW" <Formula>
<ByStep> ::= "BY" <Tactic>
<QedStep> ::= "QED"


And here are a few examples (you generated these in a prior context):

CONCEPT CellularAutomaton {
  LANGUAGE {
    TYPE Cell
    TYPE State  
    TYPE Rule = List[State] -> State
    TYPE Grid = Matrix[Cell, N, M]
    TYPE CA = (Grid, Rule)
    TYPE Pattern
    TYPE Feature
    
    FUNC Evolve : (Grid, Rule, Nat) -> Grid

    PRED LocalRule : Rule -> Bool
    PRED Emergent : Feature -> Bool  
    PRED Stable : Pattern -> Bool

    AXIOM Emergence {
      ∀ (f : Feature) (g : Grid).
        Emergent(f) ⇔ 
          (∀ (c : Cell). ¬LocalRule(λ s. NextState(c, g, s))) ∧
          (∃ p. Match(g, p) ∧ Expresses(p, f))
    }

    AXIOM Stability {
      ∀ (p : Pattern) (g : Grid) (r : Rule).
        Stable(p) ⇔ 
          Match(g, p) ∧ ∀ k. Match(Evolve(g, r, k), p)
    }  

    NOTATION "[[" <Row> ("," <Row>)* "]]" = Grid
    NOTATION "[" <Cell> ("," <Cell>)* "]" = Row
  }

  STRUCTURE ConwaysLife {
    DEF Rule : Rule = λ s.  
      LET n = Count(1, s)
      IN IF s[4] = 1 THEN IF n = 2 ∨ n = 3 THEN 1 ELSE 0
         ELSE IF n = 3 THEN 1 ELSE 0

    DEF Glider : Grid = 
      [[0,0,0,0,0],  
       [0,0,1,0,0],
       [0,0,0,1,0],
       [0,1,1,1,0],
       [0,0,0,0,0]]

    DEF Blinker : Grid =
      [[0,0,0,0,0],
       [0,0,1,0,0],  
       [0,0,1,0,0],
       [0,0,1,0,0],
       [0,0,0,0,0]]  
  }

  PROOFS {
    TACTIC MatchAt(g, p, i, j) = 
      APPLY (RULE (∀ di dj. g[i+di, j+dj] = p[di, dj]) 
             THEN Match(g, p))

    TACTIC EvolveBy(g, rule, k) = 
      MATCH k {
        0 -> REWRITE g
        k' -> REWRITE Evolve(EvolveBy(g, rule, k'-1), rule, 1)
      }

    THEOREM GliderEmergence {
      STATEMENT:
        ∀ n. LET g = EvolveBy(Glider, Rule, n) 
             IN Emergent(Glider)

      PROOF:
        LET n, g = EvolveBy(Glider, Rule, n)  
        ASSUME ∀ c. ¬LocalRule(λ s. NextState(c, g, s)) 
        LET p = [[0,1,0],[0,0,1],[1,1,1]]
        SHOW Match(g, p) BY MatchAt(g, p, (n+1)%M, (n+1)%N)
        SHOW Expresses(p, Glider) BY {
          ARGUE ∀ k. ∃ i j. Match(Evolve(Embed(p, Zero), Rule, k), p)
            WHERE (i,j) = (k%M, k%N)
          ARGUE ∀ k q r. q ≠ r ⇒ ¬Intersect(Evolve(Embed(p, q), Rule, k), 
                                              Evolve(Embed(p, r), Rule, k))
          HENCE Expresses(p, Glider)
            WHERE Glider = FEATURE (∃ p. ∀ k. Translates(p, k) ∧ Disjoint(p))
        }
        HENCE Emergent(Glider) BY Emergence
    }  

    THEOREM BlinkerStability {
      STATEMENT:
        Stable(Blinker)

      PROOF:
        LET p1 = [[0,1,0],[0,1,0],[0,1,0]],
            p2 = [[0,0,0],[1,1,1],[0,0,0]]
        
        SHOW Match(Blinker, p1) BY MatchAt(Blinker, p1, 1, 1)
        
        SHOW ∀ k. Match(Evolve(Blinker, Rule, k), 
                        IF Even(k) THEN p1 ELSE p2) BY {  
          LET k, g = EvolveBy(Blinker, Rule, k)
          IF Even(k) THEN 
            SHOW Match(g, p1) BY MatchAt(g, p1, 1, 1)
          ELSE
            SHOW Match(g, p2) BY MatchAt(g, p2, 1, 1)
        }

        HENCE Stable(Blinker) BY Stability
    }
  }
}

CONCEPT DifferentialForms {
  LANGUAGE {
    TYPE Manifold(M)
    TYPE Vector[M : Manifold, p : M] = Tangent[M, p]
    TYPE Covector[M : Manifold, p : M] = Cotangent[M, p]  
    TYPE Tensor[M : Manifold, p : M, r s : ℕ] = 
      (Vector[M, p] -> )^r -> (Covector[M, p] -> )^s -> ℝ
    TYPE Form[M : Manifold, p : M, k : ℕ] = Tensor[M, p, 0, k]

    FUNC d(ω : Form[M, p, k]) : Form[M, p, k+1]  ; Exterior derivative
    FUNC ∧(ω : Form[M, p, k], η : Form[M, p, l]) : Form[M, p, k+l]  ; Wedge product  
    FUNC ι(X : Vector[M], ω : Form[M, p, k]) : Form[M, p, k-1]  ; Interior product
    FUNC ∫(ω : Form[M, p, dim(M)], U : M) : ℝ  ; Integration
    FUNC ♯(α : Covector[M, p]) : Vector[M, p]  ; Musical isomorphism
    FUNC ♭(X : Vector[M, p]) : Covector[M, p]  ; Inverse musical isomorphism
    FUNC [_,_](X : Vector[M], Y : Vector[M]) : Vector[M]  ; Lie bracket
    FUNC L(X : Vector[M], ω : Form[M, p, k]) : Form[M, p, k]  ; Lie derivative

    AXIOM ExtDerivative {
      ∀ (ω : Form[M, p, k]) (η : Form[M, p, l]) . 
        d(ω ∧ η) = d(ω) ∧ η + (-1)^k * ω ∧ d(η)
    }

    AXIOM Poincare {
      ∀ (ω : Form[M, p, k]) . d(d(ω)) = 0
    }

    AXIOM FundamentalLemma {
      ∀ (ω : Form[M, p, k]) (X Y : Vector[M]) .
        d(ι([X, Y])(ω)) = L(X, ι(Y)(ω)) - ι(Y)(L(X, ω))
    }

    NOTATION "⟨⟨" = ♯  
    NOTATION "⟩⟩" = ♭
    NOTATION "∫∫" = ∫
  }

  STRUCTURE Symplectic(M : Manifold, ω : Form[M, p, 2]) {
    REQUIRE ∀ (p : M) . d(ω)(p) = 0  ; ω is closed
    REQUIRE ∀ (p : M) (X : Vector[M, p]) . ι(X)(ω)(p) = 0 => X = 0  ; ω is nondegenerate
  }

  STRUCTURE Riemannian(M : Manifold, g : Tensor[M, p, 0, 2]) {
    REQUIRE ∀ (p : M) (X Y : Vector[M, p]) . g(X, Y)(p) = g(Y, X)(p)  ; g is symmetric
    REQUIRE ∀ (p : M) (X : Vector[M, p]) . g(X, X)(p) ≥ 0  ; g is positive semidefinite
    REQUIRE ∀ (p : M) (X : Vector[M, p]) . g(X, X)(p) = 0 => X = 0  ; g is positive definite
  }

  PROOFS {
    TACTIC Substitute(ω, prop) -> 𝔹 {
      MATCH ω WITH
      | 0 -> SHOW prop(0)
      | ω1 ∧ ω2 -> SHOW prop(ω1 ∧ ω2) USING Substitute(ω1, (x) ↦ Substitute(ω2, (y) ↦ prop(x ∧ y)))
      | d(ω) -> SHOW prop(d(ω)) USING Substitute(ω, (x) ↦ prop(d(x)))
      | _ -> SHOW prop(ω)
    }

    THEOREM Stokes {
      STATEMENT : ∀ (M : Manifold) (ω : Form[M, p, dim(M)-1]) (U : M) . 
        ∫∫(d(ω), U) = ∫∫(ω, ∂U)

      PROOF {
        LET M : Manifold, ω : Form[M, p, dim(M)-1], U : M
        
        ∫∫(d(ω), U)
          = ∫∫(ω, ∂U) BY Stokes
      }
    }

    THEOREM Cartan {
      STATEMENT : ∀ (M : Manifold) (ω : Form[M, p, k]) (X Y : Vector[M]) .
        L(X, ι(Y)(ω)) = ι(Y)(L(X, ω)) + ι([
      PROOF {
        LET M : Manifold, ω : Form[M, p, k], X Y : Vector[M]

        L(X, ι(Y)(ω))  
          = ι(Y)(L(X, ω)) + d(ι([X, Y])(ω)) BY FundamentalLemma
          = ι(Y)(L(X, ω)) + ι([X, Y])(d(ω)) BY Poincare
          = ι(Y)(L(X, ω)) + ι([X, Y])(ω) BY ExtDerivative, Substitute(ω, (x) ↦ d(x) = 0)
      }
    }

    THEOREM SymplecticNonDegenerate {
      STATEMENT : ∀ (M : Symplectic) (p : M) (X : Vector[M, p]) .
        (∀ (Y : Vector[M, p]) . ω(X, Y)(p) = 0) => X = 0

      PROOF {
        LET (M, ω) : Symplectic, p : M, X : Vector[M, p]        ASSUME (H) : ∀ (Y : Vector[M, p]) . ω(X, Y)(p) = 0
        
        ω(X, -)(p) = 0
          => ι(X)(ω)(p) = 0  BY definition of ι
          => X = 0  BY <<(M, ω) is Symplectic>>
      }
    }

    THEOREM MusicalIsomorphisms {
      STATEMENT : ∀ (M : Riemannian) (p : M) (X : Vector[M, p]) . ⟨⟨⟩⟩X = X

      PROOF {
        LET (M, g) : Riemannian, p : M, X : Vector[M, p]

        ∀ (Y : Vector[M, p]) . g(          => ∀ (Y : Vector[M, p]) . ⟩⟩X(Y)(p) = g(X, Y)(p)  BY definition of ⟨⟨
          => ⟩⟩X = g(X, -)(p)  BY function extensionality
          => ⟨⟨⟩⟩X = ⟨⟨g(X, -)(p)  BY definition of ⟩⟩
          => ⟨⟨⟩⟩X = X  BY <<(M, g) is Riemannian>>
      }
    }
  }
}

CONCEPT HomotopyTypeTheory {
  LANGUAGE {
    TYPE U  -- universe of types
    TYPE Π(A : U, B : A -> U) <: U -- dependent function type
    TYPE Σ(A : U, B : A -> U) <: U -- dependent pair type
    TYPE Id(A : U, x : A, y : A) <: U -- identity type
    TYPE Nat <: U -- natural numbers

    FUNC Refl(A : U, x : A) : Id(A, x, x) -- reflexivity
    FUNC J(A : U, C : (x y : A) -> Id(A, x, y) -> U, d : (x : A) -> C(x, x, Refl(A, x)), 
           x y : A, p : Id(A, x, y)) : C(x, y, p) -- path induction
    FUNC Transport(A B : U, p : Id(U, A, B), x : A) : B
    FUNC Ap(f : A -> B, p : Id(A, x, y)) : Id(B, f(x), f(y)) -- action on paths
    FUNC FunExt(f g : Π(A, B), h : (x : A) -> Id(B(x), f(x), g(x))) : Id(Π(A, B), f, g) -- function extensionality

    AXIOM UIP {
      ∀ (A : U) (x y : A) (p q : Id(A, x, y)). Id(Id(A, x, y), p, q)  
    }

    AXIOM FunExtAxiom {
      ∀ (A : U) (B : A -> U) (f g : Π(A, B)).
        ((x : A) -> Id(B(x), f(x), g(x))) -> Id(Π(A, B), f, g)
    }

    NOTATION "x = y" = Id(_, x, y)  
    NOTATION "p # q" = Concat(p, q)
    NOTATION "p^" = Inv(p)
    NOTATION "x.1" = Fst(x)  
    NOTATION "x.2" = Snd(x)
  }

  STRUCTURE NatInduction {
    REQUIRE ∀ (P : Nat -> U).
      (P(0) × ((n : Nat) -> P(n) -> P(S(n)))) -> ((n : Nat) -> P(n))
  }

  STRUCTURE UnivalenceAxiom {
    REQUIRE ∀ (A B : U). IsEquiv(Id(U, A, B), Equiv(A, B))
  }

  PROOFS {
    THEOREM IdIsEquiv {
      STATEMENT:
        ∀ (A : U) (x y : A). IsEquiv(Id(A, x, y), Equiv(Singleton(x), Singleton(y)))

      PROOF:
        LET A : U, x y : A
        DEFINE f : Id(A, x, y) -> Equiv(Singleton(x), Singleton(y)) = 
          λ (p : Id(A, x, y)). Transport(Singleton(x), Singleton(y), Ap(Singleton, p), *)
        DEFINE g : Equiv(Singleton(x), Singleton(y)) -> Id(A, x, y) =
          λ (e : Equiv(Singleton(x), Singleton(y))). J(A, 
            λ (x y : A) (_ : Id(A, x, y)). Id(A, x, y),
            Refl(A, x), x, y, Cast(e, Id(Singleton(x), *, *)))
        SHOW (p : Id(A, x, y)) -> g(f(p)) = p BY {
          LET p : Id(A, x, y)  
          REWRITE g(f(p))
            = J(A, λ (x y : A) (_ : Id(A, x, y)). Id(A, x, y), Refl(A, x), x, y, 
                Cast(Transport(Singleton(x), Singleton(y), Ap(Singleton, p), *), Id(Singleton(x), *, *)))
            = J(A, λ (x y : A) (_ : Id(A, x, y)). Id(A, x, y), Refl(A, x), x, y, Ap(Singleton, p))  
            = p   BY JReduction
        }
        SHOW (e : Equiv(Singleton(x), Singleton(y))) -> f(g(e)) = e BY {
          LET e : Equiv(Singleton(x), Singleton(y))
          LET p : Id(A, x, y) = g(e)
          REWRITE f(p)  
            = Transport(Singleton(x), Singleton(y), Ap(Singleton, p), *)
            = Transport(Singleton(x), Singleton(y), Ap(Singleton, 
                J(A, λ (x y : A) (_ : Id(A, x, y)). Id(A, x, y), Refl(A, x), x, y, Cast(e, Id(Singleton(x), *, *)))), *)
            = Transport(Singleton(x), Singleton(y), Ap(Singleton, Cast(e, Id(Singleton(x), *, *))), *)  
            = Transport(Singleton(x), Singleton(y), e, *)
            = e   BY CastTransport
        }
    }

    THEOREM UnivalenceImpliesFunExt {
      STATEMENT:  
        UnivalenceAxiom -> FunExtAxiom

      PROOF:
        ASSUME UnivalenceAxiom  
        LET A : U, B : A -> U, f g : Π(A, B), h : (x : A) -> Id(B(x), f(x), g(x))
        DEFINE Φ : Equiv(Π(A, B), f, g) = 
          λ (e : Equiv(Π(A, B), f, g)). (x : A) -> Cast(Ap(Eval(x), e), Id(B(x), f(x), g(x)))
        HAVE e : Equiv(Π(A, B), f, g) BY UnivalenceAxiom, IdIsEquiv
        LET φ : Id(Π(A, B), f, g) = Cast(Φ, Equiv(Id(Π(A, B), f, g), _))  
        SHOW φ : Id(Π(A, B), f, g) BY {
          REWRITE φ  
            = Cast(Φ, Equiv(Id(Π(A, B), f, g), _))
            : Id(Π(A, B), f, g)                     BY UnivalenceAxiom, IdIsEquiv
        }
    }
  }
}


ConceptScript is a language of a new type: it's sole intended purpose is to be used in accordance with the following methodology:

1. I paste the spec and a few example Concepts into your context (as is happening now), thus teaching you the language.
2. I request that you express various concepts as Concepts; these Concepts come with detailed proofs of their own various claims; they serve as justifications of the selected structuring.
3. We iterate, precisely and efficiently exploring your latent space to solve a wide variety of important problems.

Please always output ConceptScript in a code block otherwise formatting gets lost :/

Alright, let's check your understanding of the language and system: please express HumanComputerHarmony as a Concept in as much detail as possible.