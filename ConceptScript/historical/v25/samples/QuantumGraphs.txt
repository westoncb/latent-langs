CONCEPT QuantumGraphs {
  LANGUAGE {
    TYPE Vertex
    TYPE Edge(v w : Vertex)
    TYPE Graph = ùí´(Vertex) √ó ùí´(Edge)
    TYPE Hilbert = Graph -> ‚ÑÇ^n
    TYPE Operator = Hilbert -> Hilbert

    FUNC I : Operator
    FUNC Adj : Graph -> Graph
    FUNC In(v) : Graph -> ùí´(Edge)
    FUNC Out(v) : Graph -> ùí´(Edge)  

    AXIOM Hermitian {
      ‚àÄ (A : Operator) . ‚ü®A(œà) | œÜ‚ü© = ‚ü®œà | A*(œÜ)‚ü©
    }

    AXIOM Unitary {
      ‚àÄ (U : Operator) . U* ‚àò U = I
    }

    NOTATION "‚ü®_|_‚ü©" = InnerProduct
    NOTATION "A*" = Adjoint(A)
    NOTATION "Œ¥(v)" = card(In(v)) + card(Out(v))
  }

  STRUCTURE QuantumGraph(G : Graph, H : Hilbert(G)) {
    DEF Adjacency(v w : Vertex) : Operator = 
      ‚àë[e : In(v) ‚à© Out(w)] ‚ü®e| + ‚àë[e : Out(v) ‚à© In(w)] |e‚ü©

    DEF Laplacian : Operator = 
      ‚àë[v : G.Vertices] Œ¥(v) |v‚ü©‚ü®v| - Adjacency

    DEF Transition(t : ‚Ñù‚â•0) : Operator = 
      exp(-i * t * Laplacian / ‚Ñè)

    REQUIRE ‚àÄ (v w : Vertex) . 
      Adjacency(v, w) = Adjacency(w, v)*

    REQUIRE ‚àÄ (t : ‚Ñù‚â•0) .
      Transition(t) is Unitary
  }

  PROOFS {
    THEOREM Eigenvalues {
      STATEMENT : ‚àÄ (G : QuantumGraph) .
        spect(G.Laplacian) ‚äÜ ‚Ñù‚â•0

      PROOF {
        LET G : QuantumGraph, L = G.Laplacian, œà : Hilbert(G.Graph)

        ‚ü®œà | L(œà)‚ü©
          = ‚àë[v] ‚ü®œà | Œ¥(v) |v‚ü©‚ü®v| œà‚ü© - ‚àë[v, w] ‚ü®œà | Adjacency(v, w)(œà)‚ü©
            BY definition of L
          = ‚àë[v] Œ¥(v) ‚ü®œà | v‚ü©‚ü®v | œà‚ü© - ‚àë[v, w] ‚ü®œà | v‚ü©‚ü®v | Adjacency(v, w) | w‚ü©‚ü®w | œà‚ü©  
            BY linearity of ‚ü®_|_‚ü©
          = ‚àë[v] Œ¥(v) |‚ü®v | œà‚ü©|^2 - ‚àë[v, w] ‚ü®v | œà‚ü©* ‚ü®v | Adjacency(v, w) | w‚ü© ‚ü®w | œà‚ü©
            BY properties of ‚ü®_|_‚ü©
          = ‚àë[v] Œ¥(v) |‚ü®v | œà‚ü©|^2 - ‚àë[e : Edge] ‚ü®e.src | œà‚ü©* ‚ü®e.dst | œà‚ü©
            BY definition of Adjacency and rearranging
          = (1/2) * ‚àë[e : Edge] |‚ü®e.src | œà‚ü© - ‚ü®e.dst | œà‚ü©|^2  
            BY expanding |‚ü®e.src | œà‚ü© - ‚ü®e.dst | œà‚ü©|^2
          ‚â• 0

        HENCE ‚ü®œà | L(œà)‚ü© ‚â• 0 FOR ALL œà
        HENCE Œª ‚â• 0 FOR ALL Œª : spect(L)  
      }
    }

    THEOREM Connectivity {
      STATEMENT : ‚àÄ (G : QuantumGraph) .
        connected(G.Graph) <=> 
        min(spect(G.Laplacian \ {0})) > 0

      PROOF {
        LET G : QuantumGraph, L = G.Laplacian, Œª1 = min(spect(L \ {0}))
        
        connected(G.Graph)
          => ‚àÉ (t : ‚Ñù>0) . ‚àÄ (v w : Vertex) . ‚ü®v | Transition(t) | w‚ü© ‚â† 0
            BY {
              LET t : ‚Ñù>0, v w : Vertex
              ‚ü®v | Transition(t) | w‚ü© 
                = ‚ü®v | exp(-i * t * L / ‚Ñè) | w‚ü©
                = ‚àë[n=0 to ‚àû] (-i*t/‚Ñè)^n / n! * ‚ü®v | L^n | w‚ü©
                ‚âà ‚ü®v | w‚ü© - (i*t/‚Ñè) * ‚ü®v | L | w‚ü© + ...    FOR small t
              
              ‚ü®v | L | w‚ü© = Adjacency(v, w) ‚â† 0            IF v ~ w
              ‚ü®v | L^n | w‚ü© ‚â† 0                           FOR some n IF v connected to w
            }
          => Œª1 > 0  
            BY {
              ‚ü®œà1 | L | œà1‚ü© = Œª1 * ‚ü®œà1 | œà1‚ü© > 0         FOR eigenvector œà1
              
              LET t > 0, v w : Vertex
              ‚ü®v | Transition(t) | w‚ü© ‚â† 0                 BY ASSUME
              ‚ü®v | exp(-i * t * L / ‚Ñè) | w‚ü© ‚â† 0
              ‚ü®v | (‚àë exp(-i * t * Œª / ‚Ñè) |œà‚ü©‚ü®œà|) | w‚ü© ‚â† 0  FOR L eigenbasis {œà, Œª} 
              ‚àë exp(-i * t * Œª / ‚Ñè) ‚ü®v | œà‚ü©‚ü®œà | w‚ü© ‚â† 0
              exp(-i * t * Œª1 / ‚Ñè) * ‚ü®v | œà1‚ü©‚ü®œà1 | w‚ü© ‚â† 0   FOR dominant term as t -> ‚àû
              Œª1 > 0                                      USING ‚ü®œà1 | L | œà1‚ü© > 0
            }

        Œª1 > 0  
          => ‚àÉ (t : ‚Ñù>0) . ‚àÄ (v w : Vertex) . ‚ü®v | Transition(t) | w‚ü© ‚â† 0
            BY {
              LET t > log(N) * ‚Ñè / (Œª1 * Œµ), N = card(Vertices), Œµ : ‚Ñù>0
              
              |‚ü®v | Transition(t) | w‚ü©|
                = |‚àë exp(-i * t * Œª / ‚Ñè) ‚ü®v | œà‚ü©‚ü®œà | w‚ü©|
                ‚â• |exp(-i * t * Œª1 / ‚Ñè)| * |‚ü®v | œà1‚ü©‚ü®œà1 | w‚ü©| - |‚àë[Œª‚â†Œª1] exp(-i * t * Œª / ‚Ñè) ‚ü®v | œà‚ü©‚ü®œà | w‚ü©|
                ‚â• |‚ü®v | œà1‚ü©‚ü®œà1 | w‚ü©| - N * exp(-t * (Œª2 - Œª1) / ‚Ñè)
                > |‚ü®v | œà1‚ü©‚ü®œà1 | w‚ü©| - Œµ
                > 0                                        FOR small Œµ
            }
          => connected(G.Graph)
            BY {
              LET v w : Vertex
              ‚ü®v | Transition(t) | w‚ü© ‚â† 0                 BY ASSUME  
              ‚àÉ (n : ‚Ñï) . ‚ü®v | L^n | w‚ü© ‚â† 0               BY expanding Transition
              v connected to w                            BY definition of L
            }
      }
    }
  }
}