CONCEPT DifferentialGeometry {
  LANGUAGE {
    TYPE Manifold(M)
    TYPE Point[M : Manifold, p : M]
    TYPE Curve[M : Manifold, I : ‚Ñù] = I -> M
    TYPE VectorField[M : Manifold] = Point[M] -> Tangent[M, Point[M]]
    TYPE TensorField[M : Manifold, r s : ‚Ñï] = Point[M] -> Tensor[M, Point[M], r, s]
    
    FUNC Christoffel[M : Manifold] : TensorField[M, 1, 2] ; Christoffel symbols
    FUNC Ric[M : Manifold] : TensorField[M, 0, 2]        ; Ricci curvature tensor
    FUNC R[M : Manifold] : Point[M] -> ‚Ñù                 ; Scalar curvature

    PRED Geodesic[M : Manifold, Œ≥ : Curve[M]] : ùîπ = 
      ‚àÄ (t : ‚Ñù). ‚àá{Œ≥'(t)}(Œ≥'(t)) = 0

    AXIOM ChristoffelTransform {
      ‚àÄ (M : Manifold) (p : Point[M]) (X Y : Tangent[M, p]).
        ‚àá{X}(Y)(p) = ‚àÇ{Y^i}/‚àÇ{X^j}(p) + Christoffel[i,j,k](p)*Y^k(p) 
    }

    AXIOM RicciTensorContraction {
      ‚àÄ (M : Manifold) (p : Point[M]).
        R(p) = Contract(Ric(p))
    }

    AXIOM BianchiIdentity {
      ‚àÄ (M : Manifold).
        Symm(‚àá(Ric) - 1/2*‚àá(R)*g) = 0
    }

    NOTATION "‚àá" = CovariantDeriv
    NOTATION "‚àÇ" = PartialDeriv 
  }

  STRUCTURE Riemannian(M : Manifold, g : TensorField[M, 0, 2]) {
    REQUIRE ‚àÄ (p : Point[M]) (X Y : Tangent[M, p]). g(X, Y)(p) = g(Y, X)(p)  ; g is symmetric
    REQUIRE ‚àÄ (p : Point[M]) (X : Tangent[M, p]). g(X, X)(p) ‚â• 0              ; g is positive semidefinite
    REQUIRE ‚àÄ (p : Point[M]) (X : Tangent[M, p]). g(X, X)(p) = 0 => X = 0     ; g is positive definite
  }

  STRUCTURE Einstein(M : Manifold, g : TensorField[M, 0, 2]) <: Riemannian(M, g) {
    REQUIRE ‚àÄ (p : Point[M]).
      Ric(p) - 1/2*R(p)*g(p) = 8*œÄ*G*StressEnergy(p)  ; Einstein field equation
  }

  PROOFS {
    THEOREM GeodesicParallelTransport {
      STATEMENT:
        ‚àÄ (M : Riemannian) (Œ≥ : Curve[M]) (X : VectorField[M]).
          Geodesic(Œ≥) ‚àß ‚àá{Œ≥'(0)}(X)(Œ≥(0)) = 0 => ‚àÄ (t : ‚Ñù). ‚àá{Œ≥'(t)}(X)(Œ≥(t)) = 0

      PROOF:
        LET (M, g) : Riemannian, Œ≥ : Curve[M], X : VectorField[M]
        ASSUME (H1) : Geodesic(Œ≥), (H2) : ‚àá{Œ≥'(0)}(X)(Œ≥(0)) = 0
        
        SUFFICES-TO-SHOW ‚àÄ (t : ‚Ñù). ‚àá{Œ≥'(t)}(X)(Œ≥(t)) = 0
        LET t : ‚Ñù

        ‚àá{Œ≥'(t)}(X)(Œ≥(t))
          = D{t}(X(Œ≥(t))) - X(Œ≥(t)) ‚àá{Œ≥'(t)}(Œ≥'(t))  BY LeviCivitaProperty
          = D{t}(X(Œ≥(t))) - 0                         BY H1, Geodesic
          = 0                                        BY {
              D{t}(X(Œ≥(t))) 
                = ‚àá{Dt(Œ≥(t))}(X(Œ≥(t)))                BY CovariantDerivative 
                = ‚àá{Œ≥'(t)}(X)(Œ≥(t))                   BY FundThmCalc, H2
                = 0                                   IH
            }
      }
    }

    THEOREM RicciTensorDivergence {
      STATEMENT:
        ‚àÄ (M : Einstein). ‚àá{a}(Ric[a,b] - 1/2*R*g[a,b]) = 0

      PROOF:
        LET (M, g) : Einstein

        ‚àá{a}(Ric[a,b] - 1/2*R*g[a,b])
          = ‚àÇ{a}(Ric[a,b] - 1/2*R*g[a,b]) + Œì{a,a,c}*(Ric[c,b] - 1/2*R*g[c,b])  BY CovariantDerivative
          = ‚àÇ{a}(Ric[a,b]) - 1/2*‚àÇ{a}(R)*g[a,b] - 1/2*R*‚àÇ{a}(g[a,b]) + Œì{a,a,c}*(Ric[c,b] - 1/2*R*g[c,b]) BY ProductRule, ChainRule
          = ‚àá{a}(Ric[a,b]) - 1/2*‚àá{a}(R)*g[a,b]   BY MetricCompatibility
          = 0     BY BianchiIdentity
    }
  }
}