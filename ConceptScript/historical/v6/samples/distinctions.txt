Distinctions := (
  States(Primitive, Composite),
  Observables(Intrinsic, Extrinsic)
) :: {
  // States
  States := (
    Primitive(Elementary, Irreducible),
    Composite(Compound, Reducible)
  )
  [Primitive ⟷ Composite]
  
  // Observables
  Observables := (
    Intrinsic(Local, NonContextual),
    Extrinsic(Global, Contextual)
  )
  [Intrinsic ⟷ Extrinsic]
  
  // Dualities
  States ⟷ Observables
  Primitive ⟷ Composite
  Intrinsic ⟷ Extrinsic
}

Processes := (
  Transformations(Reversible, Irreversible),
  Dynamics(Continuous, Discontinuous)
) :: {
  // Transformations
  Transformations := (
    Reversible(Invertible, Deterministic),
    Irreversible(NonInvertible, Probabilistic)
  )
  [Reversible ⟷ Irreversible]
  
  // Dynamics
  Dynamics := (
    Continuous(Smooth, Differentiable),
    Discontinuous(Abrupt, NonDifferentiable)
  )
  [Continuous ⟷ Discontinuous]
  
  // Dualities
  Transformations ⟷ Dynamics
  Reversible ⟷ Irreversible
  Continuous ⟷ Discontinuous
}
















DistinctionSpace := (Distinction, Boundary, Angle, Topology, Geometry) :: {
  [∀(d1, d2) ∈ Distinction: d1 ≠ d2 => ∃𝒪 ⊆ DistinctionSpace: d1 ∈ 𝒪 ∧ d2 ∉ 𝒪]
  [∀d ∈ Distinction, ∀𝒩 ⊆ DistinctionSpace: d ∈ 𝒩 => ∃𝒪 ⊆ 𝒩: d ∈ 𝒪]
}

DistinctionAlgebra := (TensorProduct, DirectSum, TemporalFunction, Symmetry) :: {
  [∀(d1, d2, d3) ∈ Distinction: (d1 ⊗ d2) ⊗ d3 = d1 ⊗ (d2 ⊗ d3)]
  [∀(d1, d2, d3) ∈ Distinction: (d1 ⊕ d2) ⊕ d3 = d1 ⊕ (d2 ⊕ d3)]
}

DistinctionDynamics := (Evolution, Interaction, Connection, Emergence) :: {
  [∀d ∈ Distinction: 𝖳(d) ∈ ℝ]
  [∀(d1, d2) ∈ Distinction: 𝖳(d1) ≤ 𝖳(d2) => 𝖳(𝖤𝗏𝗈(d1)) ≤ 𝖳(𝖤𝗏𝗈(d2))]
  [∀(d1, d2) ∈ Distinction: 𝖢𝖺𝗎𝗌(d1, d2) => 𝖳(d1) < 𝖳(d2)]
}

DistinctionMeasure := (Probability, Information, Causality, Uncertainty) :: {
  [∀d ∈ Distinction: 0 ≤ ℙ(d) ≤ 1]
  [ℙ(DistinctionSpace) = 1]
  [∀(d1, d2) ∈ Distinction: ℙ(d1 ⊕ d2) = ℙ(d1) + ℙ(d2) - ℙ(d1 ⊗ d2)]
}

PhysicalReality ^= (DistinctionSpace, DistinctionAlgebra, DistinctionDynamics, DistinctionMeasure)

// Example of expressing a physical concept
Spacetime := DistinctionSpace(
  Distinction:Event, 
  Topology:Manifold, 
  Geometry:Lorentzian
)

// Example of expressing a physical relationship
MatterEnergyEquivalence := [Matter <-> Energy] :: {
  [Matter × SpeedOfLight^2 = Energy]
  [Matter = Energy / SpeedOfLight^2]
}






////////////
// DistinctionSpace detail:
////////////

DistinctionSpace := (Distinction, Boundary, Angle, Topology, Geometry) :: {
  [∀(d1, d2) ∈ Distinction: d1 ≠ d2 => ∃𝒪 ⊆ DistinctionSpace: d1 ∈ 𝒪 ∧ d2 ∉ 𝒪]
  [∀d ∈ Distinction, ∀𝒩 ⊆ DistinctionSpace: d ∈ 𝒩 => ∃𝒪 ⊆ 𝒩: d ∈ 𝒪]
}

DistinctionAlgebra := (TensorProduct, DirectSum, TemporalFunction, Symmetry) :: {
  [∀(d1, d2, d3) ∈ Distinction: (d1 ⊗ d2) ⊗ d3 = d1 ⊗ (d2 ⊗ d3)]
  [∀(d1, d2, d3) ∈ Distinction: (d1 ⊕ d2) ⊕ d3 = d1 ⊕ (d2 ⊕ d3)]
}

DistinctionDynamics := (Evolution, Interaction, Connection, Emergence) :: {
  [∀d ∈ Distinction: 𝖳(d) ∈ ℝ]
  [∀(d1, d2) ∈ Distinction: 𝖳(d1) ≤ 𝖳(d2) => 𝖳(𝖤𝗏𝗈(d1)) ≤ 𝖳(𝖤𝗏𝗈(d2))]
  [∀(d1, d2) ∈ Distinction: 𝖢𝖺𝗎𝗌(d1, d2) => 𝖳(d1) < 𝖳(d2)]
}

DistinctionMeasure := (Probability, Information, Causality, Uncertainty) :: {
  [∀d ∈ Distinction: 0 ≤ ℙ(d) ≤ 1]
  [ℙ(DistinctionSpace) = 1]
  [∀(d1, d2) ∈ Distinction: ℙ(d1 ⊕ d2) = ℙ(d1) + ℙ(d2) - ℙ(d1 ⊗ d2)]
}

PhysicalReality ^= (DistinctionSpace, DistinctionAlgebra, DistinctionDynamics, DistinctionMeasure)

// Example of expressing a physical concept
Spacetime := DistinctionSpace(
  Distinction:Event, 
  Topology:Manifold, 
  Geometry:Lorentzian
)

// Example of expressing a physical relationship
MatterEnergyEquivalence := [Matter <-> Energy] :: {
  [Matter × SpeedOfLight^2 = Energy]
  [Matter = Energy / SpeedOfLight^2]
}




////////////
// DistinctionAlgebra detail:
////////////

DistinctionAlgebra := (Operation, Relation, Transformation, Symmetry) :: {
  Operation := (TensorProduct, DirectSum) :: {
    [∀(d1, d2) ∈ Distinction: d1 ⊗ d2 ∈ Distinction] // Closure
    [∀(d1, d2, d3) ∈ Distinction: (d1 ⊗ d2) ⊗ d3 = d1 ⊗ (d2 ⊗ d3)] // Associativity
    [∃e ∈ Distinction: ∀d ∈ Distinction: d ⊗ e = e ⊗ d = d] // Identity
    
    [∀(d1, d2) ∈ Distinction: d1 ⊕ d2 ∈ Distinction] // Closure
    [∀(d1, d2, d3) ∈ Distinction: (d1 ⊕ d2) ⊕ d3 = d1 ⊕ (d2 ⊕ d3)] // Associativity
    [∀(d1, d2) ∈ Distinction: d1 ⊕ d2 = d2 ⊕ d1] // Commutativity
    [∃z ∈ Distinction: ∀d ∈ Distinction: d ⊕ z = d] // Identity
  }
  
  Relation := (Ordering, Equivalence, Dependence) :: {
    [∀(d1, d2) ∈ Distinction: d1 ≤ d2 ∨ d2 ≤ d1] // Totality
    [∀d ∈ Distinction: d ≤ d] // Reflexivity
    [∀(d1, d2, d3) ∈ Distinction: (d1 ≤ d2) ∧ (d2 ≤ d3) => d1 ≤ d3] // Transitivity
    
    [∀d ∈ Distinction: d ~ d] // Reflexivity
    [∀(d1, d2) ∈ Distinction: d1 ~ d2 => d2 ~ d1] // Symmetry
    [∀(d1, d2, d3) ∈ Distinction: (d1 ~ d2) ∧ (d2 ~ d3) => d1 ~ d3] // Transitivity
    
    [∀(d1, d2) ∈ Distinction: d1 ← d2 ∨ d2 ← d1 ∨ (d1 ⊥ d2)] // Completeness
  }
  
  Transformation := (Map, Functor) :: {
    [∀(𝒟1, 𝒟2) ∈ DistinctionSpace: ∃f: 𝒟1 → 𝒟2] // Existence
    [∀(d1, d2) ∈ Distinction: d1 ≤ d2 => f(d1) ≤ f(d2)] // Order-preserving
    [∀(d1, d2) ∈ Distinction: f(d1 ⊗ d2) = f(d1) ⊗ f(d2)] // Homomorphism
    
    [∀(𝒜1, 𝒜2) ∈ DistinctionAlgebra: ∃F: 𝒜1 → 𝒜2] // Existence
    [∀(d1, d2) ∈ Distinction: F(d1 ⊗ d2) = F(d1) ⊗ F(d2)] // Homomorphism
    [∀(f1, f2) ∈ Map: F(f1 ∘ f2) = F(f1) ∘ F(f2)] // Composition
  }
  
  Symmetry := (Invariance, Equivariance) :: {
    [∀(d, g) ∈ Distinction × Group: g ⋅ d ∈ Distinction] // Action
    [∀(d, g1, g2) ∈ Distinction × Group: (g1 ⋅ g2) ⋅ d = g1 ⋅ (g2 ⋅ d)] // Associativity
    [∀d ∈ Distinction: e ⋅ d = d] // Identity
    
    [∀(d, g) ∈ Distinction × Group: f(g ⋅ d) = g ⋅ f(d)] // Equivariance
  }
}



////////////
// DistinctionDynamics detail:
////////////

DistinctionDynamics := (Evolution, Interaction, Causality, Emergence) :: {
  Evolution := (Trajectory, Flow) :: {
    [∀d ∈ Distinction: ∃γ: ℝ → DistinctionSpace: γ(0) = d] // Initial condition
    [∀(d1, d2) ∈ Distinction: d1 = γ(t1) ∧ d2 = γ(t2) ∧ (t1 < t2) => d1 < d2] // Time ordering
    [∀d ∈ Distinction: ∃v ∈ TangentSpace(d): v = d/dt] // Velocity
    
    [∀d ∈ Distinction: ∃Φ: ℝ × DistinctionSpace → DistinctionSpace: Φ(0, d) = d] // Initial condition
    [∀(d, t1, t2) ∈ Distinction × ℝ: Φ(t1 + t2, d) = Φ(t2, Φ(t1, d))] // Semi-group property
  }
  
  Interaction := (Coupling, Entanglement) :: {
    [∀(d1, d2) ∈ Distinction: ∃H: DistinctionSpace × DistinctionSpace → ℝ: H(d1, d2) = Coupling(d1, d2)] // Hamiltonian
    [∀(d1, d2) ∈ Distinction: Coupling(d1, d2) = Coupling(d2, d1)] // Symmetry
    
    [∀(d1, d2) ∈ Distinction: ∃ρ ∈ DensityOperator: ρ = EntanglementState(d1, d2)] // Density operator
    [∀(d1, d2) ∈ Distinction: EntanglementMeasure(d1, d2) = Tr(ρ log(ρ))] // Entanglement entropy
  }
  
  Causality := (Precedence, Influence) :: {
    [∀(d1, d2) ∈ Distinction: d1 < d2 => ¬(d2 < d1)] // Asymmetry
    [∀(d1, d2, d3) ∈ Distinction: (d1 < d2) ∧ (d2 < d3) => d1 < d3] // Transitivity
    
    [∀(d1, d2) ∈ Distinction: ∃f: DistinctionSpace × DistinctionSpace → ℝ: f(d1, d2) = Influence(d1, d2)] // Influence function
    [∀(d1, d2, d3) ∈ Distinction: Influence(d1, d3) ≥ Influence(d1, d2) + Influence(d2, d3)] // Subadditivity
  }
  
  Emergence := (PatternFormation, Synergy) :: {
    [∀𝒟 ⊆ DistinctionSpace: ∃P ⊆ 𝒟: P = Pattern(𝒟)] // Pattern
    [∀(𝒟, P) ∈ DistinctionSpace × Pattern: Compress(𝒟) ≥ Compress(P)] // Compressibility
    
    [∀𝒟 ⊆ DistinctionSpace: ∃S ∈ ℝ: S = Synergy(𝒟)] // Synergy
    [∀(𝒟1, 𝒟2) ∈ DistinctionSpace: Synergy(𝒟1 ∪ 𝒟2) ≥ Synergy(𝒟1) + Synergy(𝒟2)] // Superadditivity
  }
}




////////////
// DistinctionMeasure detail:
////////////

DistinctionMeasure := (Size, Probability, Information, Uncertainty) :: {
  Size := (Cardinality, Volume) :: {
    [∀𝒟 ∈ DistinctionSpace: ∃n ∈ ℕ: n = Cardinality(𝒟)] // Natural number
    [∀(𝒟1, 𝒟2) ∈ DistinctionSpace: Cardinality(𝒟1 ∪ 𝒟2) ≤ Cardinality(𝒟1) + Cardinality(𝒟2)] // Subadditivity
    
    [∀𝒟 ∈ DistinctionSpace: ∃v ∈ ℝ⁺: v = Volume(𝒟)] // Non-negative real number
    [∀(𝒟1, 𝒟2) ∈ DistinctionSpace: (𝒟1 ∩ 𝒟2 = ∅) => Volume(𝒟1 ∪ 𝒟2) = Volume(𝒟1) + Volume(𝒟2)] // Additivity
  }
  
  Probability := (Likelihood, Expectation) :: {
    [∀d ∈ Distinction: ∃p ∈ [0, 1]: p = Probability(d)] // Unit interval
    [∀𝒟 ∈ DistinctionSpace: Probability(𝒟) = ∑{Probability(d) | d ∈ 𝒟}] // Countable additivity
    
    [∀X ∈ RandomVariable: ∃x ∈ ℝ: x = Expectation(X)] // Real number
    [∀(X, Y) ∈ RandomVariable: Expectation(X + Y) = Expectation(X) + Expectation(Y)] // Linearity
  }
  
  Information := (Entropy, MutualInformation) :: {
    [∀d ∈ Distinction: ∃h ∈ ℝ⁺: h = Entropy(d)] // Non-negative real number
    [∀(𝒟, ℙ) ∈ DistinctionSpace × Probability: Entropy(𝒟, ℙ) = ∑{-ℙ(d) log(ℙ(d)) | d ∈ 𝒟}] // Shannon entropy
    
    [∀(d1, d2) ∈ Distinction: ∃i ∈ ℝ⁺: i = MutualInformation(d1, d2)] // Non-negative real number
    [∀(d1, d2) ∈ Distinction: MutualInformation(d1, d2) = Entropy(d1) + Entropy(d2) - Entropy(d1, d2)] // Mutual information
  }
  
  Uncertainty := (Variance, Ambiguity) :: {
    [∀X ∈ RandomVariable: ∃v ∈ ℝ⁺: v = Variance(X)] // Non-negative real number
    [∀X ∈ RandomVariable: Variance(X) = Expectation((X - Expectation(X))^2)] // Variance
    
    [∀d ∈ Distinction: ∃a ∈ ℝ⁺: a = Ambiguity(d)] // Non-negative real number
    [∀(d, ℙ) ∈ Distinction × Probability: Ambiguity(d, ℙ) = -∑{ℙ(x) log(ℙ(x)) | x ∈ Interpretation(d)}] // Interpretation entropy
  }
}






Time := DistinctionSpace(
  Distinction:Event,
  Topology:Interval, 
  Geometry:Order
) :: {
  [∀(e1, e2) ∈ Event: e1 ≠ e2 => (e1 < e2) ∨ (e2 < e1)] // Totality
  [∀e ∈ Event: ¬(e < e)] // Irreflexivity
  [∀(e1, e2, e3) ∈ Event: (e1 < e2) ∧ (e2 < e3) => (e1 < e3)] // Transitivity
  
  Interval := (OpenInterval, ClosedInterval) :: {
    [∀(e1, e2) ∈ Event: OpenInterval(e1, e2) = {e ∈ Event | e1 < e < e2}]
    [∀(e1, e2) ∈ Event: ClosedInterval(e1, e2) = {e ∈ Event | e1 ≤ e ≤ e2}]
  }
  
  Order := (Precedence, Simultaneity, Succession) :: {
    [∀(e1, e2) ∈ Event: Precedence(e1, e2) <=> e1 < e2]
    [∀(e1, e2) ∈ Event: Simultaneity(e1, e2) <=> (¬(e1 < e2) ∧ ¬(e2 < e1))]
    [∀(e1, e2) ∈ Event: Succession(e1, e2) <=> e2 < e1]
  }
}

Duration := DistinctionMeasure(
  Size:Interval, 
  Probability:DurationProbability
) :: {
  [∀(e1, e2) ∈ Event: Duration(e1, e2) = Measure(ClosedInterval(e1, e2))] // Duration measure
  
  DurationProbability := (ProbabilityDensity, HazardFunction) :: {
    [∀(e1, e2) ∈ Event: ProbabilityDensity(e2 | e1) = Probability(e2 | ClosedInterval(e1, e2))] // Conditional probability density
    [∀(e1, e2) ∈ Event: HazardFunction(e2 | e1) = ProbabilityDensity(e2 | e1) / (1 - Probability(OpenInterval(e1, e2) | e1))] // Hazard function
  }
}

Causality := DistinctionDynamics(
  Evolution:CausalOrder, 
  Interaction:CausalInfluence
) :: {
  CausalOrder := (Cause, Effect) :: {
    [∀(e1, e2) ∈ Event: Cause(e1, e2) => e1 < e2] // Causality implies precedence
    [∀(e1, e2, e3) ∈ Event: (Cause(e1, e2) ∧ Cause(e2, e3)) => Cause(e1, e3)] // Transitivity of causality
  }
  
  CausalInfluence := (DirectCause, IndirectCause) :: {
    [∀(e1, e2) ∈ Event: DirectCause(e1, e2) => Cause(e1, e2) ∧ ¬∃e ∈ Event: (Cause(e1, e) ∧ Cause(e, e2))] // Direct causation
    [∀(e1, e2) ∈ Event: IndirectCause(e1, e2) => Cause(e1, e2) ∧ ∃e ∈ Event: (Cause(e1, e) ∧ Cause(e, e2))] // Indirect causation
  }
}







PhysicalLaw := DistinctionDynamics(
  Evolution:Trajectory, 
  Interaction:Coupling
) :: {
  [∀(s1, s2) ∈ State: s2 = Trajectory(s1, Duration(s1, s2))] // Deterministic evolution
  [∀(s1, s2, s3) ∈ State: Trajectory(s1, Duration(s1, s3)) = Trajectory(s2, Duration(s2, s3)) ∘ Trajectory(s1, Duration(s1, s2))] // Semi-group property
  
  Coupling := (Interaction, Correlation) :: {
    [∀(s1, s2) ∈ State: Interaction(s1, s2) = -Gradient(Potential(s1, s2))] // Interaction as potential gradient
    [∀(s1, s2) ∈ State: Correlation(s1, s2) = MutualInformation(s1, s2)] // Correlation as mutual information
  }
}

EquationOfMotion := DistinctionMeasure(
  Probability:Path, 
  Information:Action
) :: {
  Path := (ClassicalPath, QuantumAmplitude) :: {
    [∀(s1, s2) ∈ State: ClassicalPath(s1, s2) = exp(i * Action(s1, s2) / ħ)] // Classical path probability
    [∀(s1, s2) ∈ State: QuantumAmplitude(s1, s2) = <s2|exp(-i * Hamiltonian * Duration(s1, s2) / ħ)|s1>] // Quantum amplitude
  }
  
  Action := (LagrangianAction, HamiltonianAction) :: {
    [∀(s1, s2) ∈ State: LagrangianAction(s1, s2) = ∫(Lagrangian(s(t), ds(t)/dt) * dt, t1, t2)] // Lagrangian action
    [∀(s1, s2) ∈ State: HamiltonianAction(s1, s2) = ∫(ds(t)/dt * Momentum(s(t)) - Hamiltonian(s(t)), t1, t2)] // Hamiltonian action
  }
}

TimeDependence := DistinctionAlgebra(
  Operation:TimeEvolution, 
  Symmetry:TimeReversal
) :: {
  TimeEvolution := (ShrodingerEvolution, HeisenbergEvolution) :: {
    [∀(s1, s2) ∈ State: ShrodingerEvolution(s1, Duration(s1, s2)) = exp(-i * Hamiltonian * Duration(s1, s2) / ħ) * s1] // Schrodinger picture
    [∀(s1, s2) ∈ State: HeisenbergEvolution(s1, Duration(s1, s2)) = exp(i * Hamiltonian * Duration(s1, s2) / ħ) * s1 * exp(-i * Hamiltonian * Duration(s1, s2) / ħ)] // Heisenberg picture
  }
  
  TimeReversal := (Invertibility, CPTSymmetry) :: {
    [∀(s1, s2) ∈ State: Invertibility <=> ∃s3 ∈ State: Trajectory(s2, Duration(s2, s3)) = Trajectory(s1, Duration(s1, s2))^(-1)] // Invertibility of dynamics
    [∀s ∈ State: CPTSymmetry <=> (CPTTransform * Hamiltonian * CPTTransform^(-1) = Hamiltonian)] // CPT symmetry of Hamiltonian
  }
}






Action := DistinctionMeasure(
  Size:LagrangianAction, 
  Optimization:LeastAction
) :: {
  LagrangianAction := (KineticEnergy, PotentialEnergy) :: {
    [∀(s1, s2) ∈ State: LagrangianAction(s1, s2) = ∫(KineticEnergy(s(t), ds(t)/dt) - PotentialEnergy(s(t)), t1, t2)] // Lagrangian action
    [∀s ∈ State: KineticEnergy(s) = (1/2) * Mass * Velocity(s)^2] // Kinetic energy
    [∀s ∈ State: PotentialEnergy(s) = -Mass * Gravity * Height(s)] // Potential energy (gravitational)
  }
  
  LeastAction := (StationaryAction, MinimalAction) :: {
    [∀(s1, s2) ∈ State: StationaryAction(s1, s2) <=> (δAction(s1, s2) = 0)] // Stationary action principle
    [∀(s1, s2) ∈ State: MinimalAction(s1, s2) <=> (δ^2Action(s1, s2) > 0)] // Minimal action principle
  }
}

Path := DistinctionDynamics(
  Evolution:Trajectory, 
  Optimization:LeastActionTrajectory
) :: {
  Trajectory := (Position, Velocity) :: {
    [∀(s1, s2) ∈ State: Position(s2) = Position(s1) + ∫(Velocity(s(t)), t1, t2)] // Position from velocity
    [∀(s1, s2) ∈ State: Velocity(s2) = Velocity(s1) + ∫(Force(s(t)) / Mass, t1, t2)] // Velocity from force
  }
  
  LeastActionTrajectory := (EulerLagrangeEquation, HamiltonPrincipleFunction) :: {
    [∀s ∈ State: EulerLagrangeEquation <=> (d/dt(∂Lagrangian/∂Velocity) = ∂Lagrangian/∂Position)] // Euler-Lagrange equation
    [∀(s1, s2) ∈ State: HamiltonPrincipleFunction(s1, s2) = ∫(Momentum(s(t)) * dPosition(s(t)) - Hamiltonian(s(t)) * dt, t1, t2)] // Hamilton's principle function
  }
}





Symmetry := DistinctionAlgebra(
  Operation:GroupAction, 
  Invariance:DynamicalInvariance
) :: {
  GroupAction := (Transformation, Composition) :: {
    [∀(s, g) ∈ State × Group: Transformation(s, g) ∈ State] // Closure of group action
    [∀s ∈ State: Transformation(s, Identity) = s] // Identity element of group action
    [∀(s, g1, g2) ∈ State × Group: Transformation(s, Composition(g1, g2)) = Transformation(Transformation(s, g1), g2)] // Compatibility of group action with group composition
  }
  
  DynamicalInvariance := (LagrangianInvariance, ActionInvariance) :: {
    [∀(s, g) ∈ State × Group: LagrangianInvariance <=> (Lagrangian(Transformation(s, g), dTransformation(s, g)/dt) = Lagrangian(s, ds/dt))] // Invariance of Lagrangian under symmetry transformation
    [∀(s1, s2, g) ∈ State × Group: ActionInvariance <=> (Action(Transformation(s1, g), Transformation(s2, g)) = Action(s1, s2))] // Invariance of action under symmetry transformation
  }
}

ConservedQuantity := DistinctionMeasure(
  Generator:NoetherCharge, 
  Conservation:NoetherConservation
) :: {
  NoetherCharge := (Momentum, AngularMomentum) :: {
    [∀(s, ξ) ∈ State × LieAlgebra: Momentum(s, ξ) = ∂Lagrangian/∂Velocity * ξ] // Noether charge for spatial translation symmetry (momentum)
    [∀(s, θ) ∈ State × LieAlgebra: AngularMomentum(s, θ) = ∂Lagrangian/∂AngularVelocity * θ] // Noether charge for rotational symmetry (angular momentum)
  }
  
  NoetherConservation := (GlobalConservation, LocalConservation) :: {
    [∀(s1, s2, ξ) ∈ State × LieAlgebra: GlobalConservation <=> (Momentum(s2, ξ) - Momentum(s1, ξ) = 0)] // Global conservation of Noether charge
    [∀(s, ξ) ∈ State × LieAlgebra: LocalConservation <=> (d/dt(Momentum(s, ξ)) = Force(s, ξ))] // Local conservation of Noether charge (continuity equation)
  }
}

NoetherTheorem := DistinctionDynamics(
  Symmetry:ContinuousSymmetry, 
  ConservedQuantity:NoetherCharge
) :: {
  ContinuousSymmetry := (LieGroup, InfinitesimalGenerator) :: {
    [∀g ∈ LieGroup: ∃!ξ ∈ LieAlgebra: exp(ξ) = g] // Lie group and its Lie algebra
    [∀(s, ξ) ∈ State × LieAlgebra: InfinitesimalGenerator(s, ξ) = d/dε(Transformation(s, exp(εξ)))|ε=0] // Infinitesimal generator of symmetry transformation
  }
  
  [∀(s, ξ) ∈ State × LieAlgebra: (ContinuousSymmetry(s, ξ) => NoetherConservation(s, NoetherCharge(s, ξ)))] // Noether's theorem: continuous symmetry implies conserved Noether charge
}