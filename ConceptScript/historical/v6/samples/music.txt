Music := (
  SoundElements,
  Composition,
  EmergentProperties
) :: {
  DEF[
    ∈: In,
    ∉: NotIn,
    ⊆: Subset,
    ∪: Union,
    ∩: Intersection,
    ⨿: CoProduct,
    ×: Product,
    |>: Sequence,
    $: ResultsIn,
    ⊢: Entails,
    ⋈: Join,
    ⋉: Split,
    ⨝: Merge,
    ⊷: ProgressiveAbstraction,
    ⋑: CrossModalMapping
  ]

  SoundElements := (
    Pitch(Frequency:_, Octave:_),
    Duration(Beat:_, Division:_),
    Dynamics(Intensity:_, Envelope:_),
    Timbre(Spectrum:_, Envelope:_)
  )

  Composition := (
    Melody(Pitches:_, Rhythm:_, Phrasing:_),
    Harmony(Chords:_, Progressions:_, Modulations:_),
    Rhythm(Beat:_, Meter:_, Tempo:_, Syncopation:_),
    Texture(Monophony | Homophony | Polyphony, Density:_),
    Form(Structure:_, Development:_, Repetition:_)
  )

  EmergentProperties := (
    Consonance(HarmonicRelationship:_, SensoryFusion:_),
    Dissonance(HarmonicTension:_, SensoryRoughness:_),
    Tonality(PitchHierarchy:_, TonicStability:_),
    Meter(RegularPulse:_, AccentPattern:_),
    Expectation(ImpliedContinuation:_, SurpriseValue:_)
  )

  // Process definitions
  SoundOrganization := (
    [SoundElements ⋈ Composition] $
    (Melody ⨝ Harmony ⨝ Rhythm ⨝ Texture ⨝ Form)
  )

  EmergenceOfProperties := (
    [SoundOrganization ⊷ EmergentProperties] $
    (Consonance ⊢ Stability) ×
    (Dissonance ⊢ Tension) × 
    (Tonality ⊢ Unity) ×
    (Meter ⊢ Regularity) ×
    (Expectation ⊢ Direction)  
  )

  MusicalCommunication := (
    [SoundOrganization |> EmergenceOfProperties] $
    (Expression ⋑ Perception ⋑ Cognition ⋑ Emotion)  
  )

  // Constraints
  [∀(p ∈ Pitch) ∃(f ∈ Frequency) [p.Frequency = f]]
  [∀(d ∈ Duration) ∃(b ∈ Beat, v ∈ Division) [d.Beat = b ∧ d.Division = v]]
  [∀(c ∈ Consonance) ∃(h ∈ HarmonicRelationship, s ∈ SensoryFusion) [c.HarmonicRelationship = h ∧ c.SensoryFusion = s]]
  [∀(t ∈ Tonality) ∃(p ∈ PitchHierarchy, s ∈ TonicStability) [t.PitchHierarchy = p ∧ t.TonicStability = s]]
  [∀(m ∈ Meter) ∃(p ∈ RegularPulse, a ∈ AccentPattern) [m.RegularPulse = p ∧ m.AccentPattern = a]]
}