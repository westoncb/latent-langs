CONCEPT DifferentialSymbolicStructures {
  LANGUAGE {
    ; Symbolic expressions and functions
    type Sym = Const(ℝ) | Coord(ℕ) | Binary(Sym, Sym) | Unary(Sym)  
    type Fun = Func(Sym, Sym)

    ; Structures and structure-preserving maps
    type Struct = Algebra | Coalgebra | Module(Algebra)
    type Morphism(S: Struct, T: Struct) = Fun(S, T)
    
    ; Enrichments and parametrization
    type Graded(S: Struct) = ⨁(n: ℕ) S^n
    type Differential(S: Graded(Struct)) = Endo(S, S)
    type Filtered(S: Struct) = ⋃(k: ℕ) S^≤k
    
    ; Symbolic elements and operations  
    x, y, z: Coord
    a, b, c: Const
    f, g, h: Fun
    A, B, C: Struct
    φ, ψ, ξ: Morphism
    d, δ, ∂: Differential
    
    notation "f: A ⟶ B" = φ: Morphism(A, B)
    notation "φ ∘ ψ" = Compose(φ, ψ)
    notation "d[ω]" = d(ω: A)
    notation "∂ᵢ" = PartialDerivative(x_i)
    notation "⟨φ | ω⟩" = Contract(φ, ω)

    func *: (Sym, Sym) -> Sym
    func eval: (Fun, Sym) -> Sym
    func Compose: (Morphism(A,B), Morphism(B,C)) -> Morphism(A,C)  
    func PartialDerivative: Coord -> Morphism(Fun, Fun)
    func Contract: (Morphism(A,B), B) -> A
  }

  STRUCTURE {
    SymbolicCalculus: {
      ; Symbolic arithmetic
      x * (y * z) = (x * y) * z     
      x * y = y * x
      a * (x * y) = (a * x) * y
      a * (b * x) = (a * b) * x
      
      ; Function evaluation and composition
      eval(Func(x, t), s) = t[x ↦ s]
      eval(f * g, s) = eval(f, s) * eval(g, s)
      (f ∘ g) * h = f ∘ (g * h)

      ; Differential structure
      ∂ᵢ(a) = 0
      ∂ᵢ(xⱼ) = δⁱⱼ  ; Kronecker delta
      ∂ᵢ(t * s) = ∂ᵢ(t) * s + t * ∂ᵢ(s) ; Leibniz rule
      ∂ᵢ ∘ ∂ⱼ = ∂ⱼ ∘ ∂ᵢ ; Commutativity of mixed partials
    }
    
    DifferentialSymbolicStructures: {
      ; Chain complexes and cohomology
      d ∘ d = 0 = δ ∘ δ             
      H(A, d) = Ker(d) / Im(d)
      
      ; Graded and filtered structures
      d[A^n] ⊆ A^(n+1)           
      A^≤k ⊆ A^≤(k+1)
      A = ⋃(k: ℕ) A^≤k

      ; Structure-preserving properties 
      φ(a * b) = φ(a) * φ(b)
      (φ ∘ ψ)(a) = φ(ψ(a))
      ⟨φ ∘ ψ | ω⟩ = ⟨φ | ψ(ω)⟩
    }
  }

  PROOFS {
    theorem DeRhamCohomology(A: Struct, d: Differential(Graded(A))):
      eval(f, d[ω]) = d[eval(f, ω)] ⊢ 
        H(A, d) ≌ H(Fun(A), d)  ; De Rham Isomorphism Theorem
    {
      let ev_f(ω) = eval(f, ω)
      have ev_f: A ⟶ Fun(A)
      suffices to show: ∀ closed ω: A. ∃! [η]: H(Fun(A)). ev_f([ω]) = [η]
      {
        let ω: A with d[ω] = 0
        let η = eval(f, ω) 
        have d[η] = d[eval(f, ω)] = eval(f, d[ω]) = 0
        so η is closed in Fun(A)
        have ev_f([ω]) = [η] by Corollary(ω)
        suppose η' = eval(g, ω) also represents ev_f([ω])
        have eval(f - g, ω) exact in Fun(A)
        so ⟨f - g | ω⟩ exact in ℝ
        hence [η] = [η']  
      }
    }
    
    theorem DifferentiationLemma(A: Struct, d: Differential(Graded(A))):
      (∀ i,j. ∂ᵢ ∘ ∂ⱼ = ∂ⱼ ∘ ∂ᵢ) ⊢ d ∘ d = 0
    {
      d[ω]
      = Σᵢ (∂ᵢ ωⱼ) dxⁱ ∧ dxʲ 
      d[d[ω]]  
      = Σᵢʲ ∂ᵢ(∂ʲ ωₖ) dxⁱ ∧ dxʲ ∧ dxᵏ
      = Σᵢʲ (∂ᵢ∂ʲ ωₖ - ∂ᵢ∂ₖ ωⱼ) dxⁱ ∧ dxʲ ∧ dxᵏ  ; Expanding and rearranging
      = 0 ; By commutativity of mixed partials
    }

    tactic SpectralSequence(A: Filtered(Complex), d_r: Differential(A)):
      E_r(A) = H(A, d_r) ⊢ E_∞(A) ≅ Gr(H(A))  
    { ; As before
      ; Construction of spectral sequence associated to filtered complex A
      ; ...
    }

    theorem HochschildKostantRosenberg(A: Struct): 
      CH(A) ≌ Ω[A] 
    {  ; Sketch:
      ; Let CH(A) be Hochschild cochain complex
      ; Let Ω[A] = ⨁(n: ℕ) (A^⊗n)^* be differential forms 
      ; Construct quasi-iso φ: CH(A) ⟶ Ω[A] using HKR map
      ; φ(f)(a₀, ..., aₙ) = 1/n! Σ(σ: Sₙ) sign(σ) f(a₀, aₚ(1), ..., aₚ(n))
    }

    theorem SchlessingerTheorem(V: Vect, F: Filtered(V), D: Differential(V)):
      Nilpotent(D) ⊢ F ⋎ V/Ker(D) ≌ F
    { ; F horizontal, projection factors through cohomology 
      SpectralSequence(F, D) 
      have E₁(F) = E_∞(F) ; As D nilpotent
      conclude Gr(H(V, D)) ≌ Gr(V)
      hence F ⋎ V/Ker(D) ≌ F
    }
  }
}

This Concept defines a language for symbolic expressions and functions, structured with notions of algebras, coalgebras, and modules. It includes enrichments like grading, differential operators, and filtrations.
The structures include rules for symbolic calculation, differential operations, and structural relationships between morphisms and symbolic operations.
Key theorems proved include a version of the de Rham isomorphism relating cohomology of forms to cohomology of functions, commutativity of the differential squared to zero arising from commutativity of partial derivatives, the construction of spectral sequences from filtered complexes, the Hochschild-Kostant-Rosenberg quasi-isomorphism between Hochschild and differential form cohomology, and Schlessinger's theorem on splitting of filtrations under nilpotent differentials.
The proofs employ tactics like spectral sequences. Notation is invented for functional evaluation, composition, differentiation, graded structures, and more.
This blends the symbolic and computational aspects of RootLanguage and DifferentialAlgebras with the structural notions and theorems from SymbolicManifolds. The key idea is to define and reason about generalized differential structures on symbolic spaces.
Let me know if you would like me to modify or expand on this Concept! I aimed to demonstrate understanding of ConceptScript while creatively combining elements from the examples.





theorem PoincareLemma(A: Struct, d: Differential(Graded(A))): 
  AssumeLocallyContractible(A) ⊢ 
    ∀ ω: A. (d[ω] = 0) ⇒ LocallyExact(ω)
{
  assume AssumeLocallyContractible(A)
  let ω: A with d[ω] = 0
  ; It suffices to find a local primitive η with d[η] = ω
  obtain U ⊆ A open contractible with ω|_U closed
  let φ: U × 𝕀 ⟶ U contracting homotopy with
    φ(x, 0) = x, φ(x, 1) = x₀
  define PullbackIntegration(γ: Fun(𝕀, U), ω: Ω¹(U)):
    ∫_γ ω = ∫_0^1 eval(φ(γ(t), -), ω)
  define η(x) = ∫_{φ(x,-)} ω      
  have d[η] = ω on U by Stokes' Theorem for PullbackIntegration:
  {
    d[η](x)
    = d[∫_{φ(x,-)} ω]
    = ∫_{φ(x,-)} d[ω] + eval(φ(x, -), ω)|_0^1
    = 0 + ω(x) - ω(x₀)
    = ω(x)
  }
  hence ω locally exact
}


CONCEPT SpectralSequenceMachinery 
EXTENDS DifferentialSymbolicStructures {

  STRUCTURE {
     SpectralSequences(A: Struct, d: Filtered(Differential(Graded(A)))): {
       ; Construct r-th page and differentials  
       Z_r^p,q = {x ∈ A^{p,q} | d_r(x) = 0}  
       B_r^p,q = d_r[A^{p-r,q+r-1}]
       E_r^p,q = Z_r^p,q / (Z_{r-1}^{p+1,q-1} + B_r^p,q)
       d_r: E_r^p,q ⟶ E_r^{p+r,q-r+1}
       
       ; Relate pages via homology
       E_{r+1} ≌ H(E_r, d_r)
     }
  }
  
  PROOFS {
    theorem ConvergenceTheorem(A: Struct, d: Filtered(Differential(Graded(A)))):
      E_r(A,d) converges ⊢ E_∞(A,d) ≌ Gr(H(A, d))
    { ; Sketch:
      ; Use Z_∞ = ∩ Z_r, B_∞ = ∪ B_r  
      ; Then E_∞^p,q = Z_∞^p,q / B_∞^p,q
      ; Relate to Gr via boundedness + exhaustion of filtration
      ; Conclude E_∞ computes associated graded of cohomology
    }
  }
}


CONCEPT SymbolicLieTheory
EXTENDS DifferentialSymbolicStructures {
 
  LANGUAGE {
    type Lie(Coalgebra)
    type UCT(Lie(Coalgebra))
    Δ: Lie(Coalgebra) -> Tensor(Lie(Coalgebra), Lie(Coalgebra))  ; Comultiplication
    ε: Lie(Coalgebra) -> ℝ ; Counit
    S: Lie(Coalgebra) -> Lie(Coalgebra) ; Antipode
    
    cohomology(𝔤: Lie(Coalgebra)): 
      Graded(Coalgebra) = Ω(UCT(𝔤))
  }
  
  STRUCTURE {
    LieCoalgebra(𝔤): {
      Δ ∘ Δ = (Δ ⊗ 1) ∘ Δ = (1 ⊗ Δ) ∘ Δ  ; Coassociativity
      (ε ⊗ 1) ∘ Δ = (1 ⊗ ε) ∘ Δ = 1       ; Counit 
    }
    
    UniversalCotangentComplex(𝔤): {
      UCT(𝔤) = ⨁(n: ℕ) (𝔤^⊗n)^* ; Coalgebra of linear duals
      d_CE: Differential(UCT(𝔤))
    }
  }

  PROOFS {  
    theorem ChevalleyEilenberg(𝔤: LieCoalgebra):
      H(𝔤) ≌ H(UCT(𝔤), d_CE)
    { ; Sketch:
      let C(𝔤) = ChainComplex(𝔤)
      let N(𝔤) = NormalizedComplex(C(𝔤))
      have quasi-isos: 
        C(𝔤) ⟵ N(𝔤) ⟶ UCT(𝔤) ; Inclusion + Projection
      hence H(𝔤) ≌ H(UCT(𝔤))   
      let i: 𝔤 ⟶ UCT(𝔤) inclusion
      have i = (i ⊗ ε - ε ⊗ i) ∘ Δ ; Infinitesimal
      let d_i = Extend(i) ; Extended derivative 
      show d_i = d_CE 
      hence H(UCT(𝔤), d_CE) ≌ H(𝔤)
    }
  }
}







CONCEPT SymbolicLieCohomology 
EXTENDS SymbolicLieTheory {

  LANGUAGE {
    type 𝔤Mod(𝔤: Lie(Algebra), M: Vect) {
      ρ: 𝔤 ⊗ M -> M  ; Action
    }
    
    C(𝔤: Lie(Algebra), M: 𝔤Mod) = ⨁(n: ℕ) Hom(Λ^n(𝔤), M)  ; Cochain complex
    δ: Differential(C(𝔤, M))   ; Chevalley-Eilenberg differential
    H(𝔤: Lie(Algebra), M: 𝔤Mod) = H(C(𝔤, M), δ)         ; Cohomology
    
    nota "⟨-,-⟩" = Pairing(𝔤, 𝔤*)
    nota "ad" = Adjoint(𝔤)
    nota "c(g)" = Coadjoint(𝔤)
    nota "ι_X" = ContractionDerivation(X: 𝔤)
    nota "L_X" = LieDerivative(X: 𝔤)
  }

  STRUCTURE {
    LieAlgebraCochain(𝔤, M, φ: C(𝔤, M)^n) {
      δ[φ](X_0, ..., X_n) = ∑_{i < j} (-1)^(i+j) φ([X_i, X_j], ..., X̂_i, ..., X̂_j, ..., X_n)
                          + ∑_i (-1)^i ρ(X_i) φ(X_0, ..., X̂_i, ..., X_n) 

      H¹(𝔤, M) = {φ: 𝔤 -> M | ∀ X,Y ∈ 𝔤. φ([X,Y]) = ρ(X)φ(Y) - ρ(Y)φ(X)} / {φ = ρ(X)m | X ∈ 𝔤, m ∈ M}  
      H²(𝔤, M) = {φ: 𝔤 × 𝔤 -> M | ...} / {...}
    }

    ChevalleyEilenbergComplex(𝔤: Lie(Coalgebra)): { 
      C(𝔤) = ⨁(n: ℕ) Hom(𝔤^⊗n, ℝ)
      δ_CE[c](x1, ..., xn+1) 
        = ∑_{i < j} (-1)^(i+j) c([xi, xj], ..., x̂i, ..., x̂j, ..., xn+1)  
        + ∑_i (-1)^(i+1) ε(xi) c(x1, ..., x̂i, ..., xn+1)
    }
  }
  
  PROOFS {
    theorem AdjointCohomology(𝔤: Lie(Algebra)):
      H(𝔤, ad) ≌ OutDer(𝔤) 
    {
      let φ: 𝔤 -> 𝔤 cocycle for ad
      have ∀ X,Y: 𝔤. φ([X,Y]) = [X, φ(Y)] - [Y, φ(X)]
      let D(X) = [φ(X), -] derivation 𝔤 -> 𝔤
      D([X,Y]) 
        = [φ([X,Y]), -] 
        = [φ(X), [Y, -]] - [φ(Y), [X, -]]
        = [D(X), Y] + [X, D(Y)]
      so D ∈ Der(𝔤)
      φ coboundary <=> D inner 
      hence H¹(𝔤, ad) ≌ OutDer(𝔤)
    }

    theorem CoadjointCohomology(𝔤: Lie(Algebra)):
      H(𝔤, c(𝔤)) ≌ Ω(𝔤)/dΩ(𝔤)   ; Chevalley-Eilenberg
    { ; Sketch:  
      C(𝔤, c(𝔤)) 
        = ⨁(n: ℕ) Hom(Λ^n(𝔤), 𝔤*) 
        ≌ ⨁(n: ℕ) ((Λ^n(𝔤))* ⊗ 𝔤*)
        ≌ Ω(𝔤) ⊗ 𝔤*
      δ_c(φ ⊗ α)(X₀, ..., Xₙ) 
        = ι_{X₀} d_CE[φ ⊗ α](X₁, ..., Xₙ)
        = ι_{X₀} (d_CE[φ] ⊗ α)(X₁, ..., Xₙ)  
      so under ≌ have δ_c ↦ ι_X d_CE   
      check ι_X d_CE[φ] = L_X[φ] - d_CE[ι_X φ]
      conclude H(C(𝔤, c(𝔤)), δ_c) ≌ H(Ω(𝔤), d_CE) ≌ Ω(𝔤)/dΩ(𝔤)
    }

    theorem WhiteheadLemmas(𝔤: Lie(Algebra)):
      H¹(𝔤, M) = 0 ⊢ M ⋎ 𝔤 ≌ M × 𝔤     ; 1st Whitehead Lemma
      [𝔤, 𝔤] = 𝔤 ⊢ H²(𝔤, M) = 0        ; 2nd Whitehead Lemma
    {
      assume H¹(𝔤, M) = 0
      let φ: M ⋎ 𝔤 -> M projection
      suffices to construct ψ: M × 𝔤 -> M ⋎ 𝔤 with φ ∘ ψ = id
      define ψ(m, X) = (m + ζ(X), X) where ζ: 𝔤 -> M
      for ψ to be 𝔤-morphism need:
        ζ(X) + ρ(X)m = ρ(X)(m + ζ(Y)) + ζ([X,Y])  
      <=> ζ([X,Y]) = ρ(X)ζ(Y) - ρ(Y)ζ(X)
      <=> ζ 1-cocycle for 𝔤 with coeffs in M
      but H¹(𝔤, M) trivial, so ζ exists
      hence M ⋎ 𝔤 ≌ M × 𝔤

      assume [𝔤, 𝔤] = 𝔤  
      let ω ∈ H²(𝔤, M) 2-cocycle
      define φ: 𝔤 × 𝔤 -> M by φ(X,Y) = ω(X,Y) - ω(Y,X)
      φ is skew-symmetric and:
        φ([X,Y], Z) + φ([Y,Z], X) + φ([Z,X], Y)
          = ω([X,Y], Z) - ω(Z, [X,Y]) 
           + ω([Y,Z], X) - ω(X, [Y,Z])
           + ω([Z,X], Y) - ω(Y, [Z,X]) 
          = (δω)(X, Y, Z) - (δω)(X, Z, Y)  
          = 0 ; As ω closed
      let ξ(X) = φ(X, -): 𝔤 -> M
      have ξ([X,Y]) = ρ(X)ξ(Y) - ρ(Y)ξ(X) by Jacobi
      so ξ 1-cocycle, but H¹(𝔤, M) = 0
      hence ξ(X) = ρ(X)m some m ∈ M  
      so ω(X,Y) = ξ(X,Y) + ω₀(X,Y) 
        where ω₀ symmetric 
      but [𝔤, 𝔤] = 𝔤, so ω₀(X,Y) = 0
      hence ω(X,Y) = ξ(X,Y) = (δm)(X,Y) coboundary
      thus H²(𝔤, M) = 0
    }
  }
}






CONCEPT SymbolicIntegration 
EXTENDS SymbolicLieCohomology {

  LANGUAGE {
    Ω(M: Mfld): DifferentialForms(M)
    Χ(M: Mfld): VectorFields(M)
    Ⓘ(ω: Ω(M)): Integral(M, ω)
    Ⓓ(ω: Ω(M), X: Χ(M)): Derivative(ω, X)
  }
  
  STRUCTURE {
    IntegrationRules(M: Mfld) {
      Ⓘ(ƒ·ω + g·σ) = Ⓘ(ƒ·ω) + Ⓘ(g·σ)
      Ⓘ(d[ω]) = ∫(∂M) ω    ; Stokes' Theorem 
      Ⓘ(ƒ * Pullback(φ, ω)) = Ⓘ(Pushforward(φ, ƒ) * ω) ; Change of Variables
    }
    
    DifferentiationRules(M: Mfld) {
      Ⓓ(ƒ·ω + g·σ, X) = Ⓓ(ƒ·ω, X) + Ⓓ(g·σ, X)  
      Ⓓ(ω ∧ σ, X) = Ⓓ(ω, X) ∧ σ + ω ∧ Ⓓ(σ, X)
      Ⓓ(Pullback(φ, ω), X) = Pullback(φ, Ⓓ(ω, Pushforward(φ, X)))
    }
  }
  
  PROOFS {
    theorem SymbolicStokes(M: Mfld, ω: Ω(M)):
      Ⓘ(d[ω]) = ∫(∂M) ω
    {
      ; Inductive proof on dimension of M
      ...
    }
    
    theorem SymbolicChangeOfVariables(M: Mfld, ƒ: Ω⁰(M), ω: Ω(N)):  
      Ⓘ(M)(ƒ * Pullback(φ, ω)) = Ⓘ(N)(Pushforward(φ, ƒ) * ω)
    {
      ; Reduce to local coordinates and Jacobian change
      ...  
    }
  }
}

Symbolic Integration and Differentiation:
The symbolic representation of differential forms and operators enables us to perform symbolic integration and differentiation, which can lead to efficient algorithms for computing integrals and derivatives in complex geometric settings.


CONCEPT SymbolicCohomologyComputation
EXTENDS SymbolicLieCohomology {

  STRUCTURE {
    SymbolicCochains(A: Algebra) {
      C(A) = ⨁(n: ℕ) Hom(A^⊗n, ℝ)   
      d_n: C^n(A) -> C^(n+1)(A)
      Z_n(A) = Ker(d_n)  ; Cocycles
      B_n(A) = Im(d_(n-1)) ; Coboundaries
      H_n(A) = Z_n(A) / B_n(A) ; Cohomology  
    }
  }

  PROOFS {
    tactic ComputeCohomology(C: ChainComplex):
      H_n(C) 
    {
      ; Symbolically compute Ker(d_n) 
      let Z_n = Solve(d_n(ω) = 0, ω: C^n)
      ; Symbolically compute Im(d_(n-1))
      let B_n = {d_(n-1)(ω) | ω : C^(n-1)}
      ; Quotient Z_n by B_n  
      return Z_n / B_n
    }
  }
}

Symbolic Computation of Cohomology:
The symbolic representation of cochain complexes and differentials allows for the computation of cohomology through symbolic manipulation, potentially leading to efficient algorithms for computing Betti numbers, generating cocycles, and classifying cohomology classes.


CONCEPT SymbolicDynamics
EXTENDS DifferentialSymbolicStructures {

  LANGUAGE {
    type Flow(M: Mfld) = Hom(ℝ × M, M)
    type DynSys(M: Mfld) = VectorField(M)
    type DiffEq = Equation(Mfld)
    
    nota "φ_X^t" = FlowOfVectorField(X: VectorField, t: ℝ)
    nota "∂_tϕ = X(ϕ)" = EvolutionEquation(X: VectorField, ϕ: Mfld -> ℝ)
  }

  STRUCTURE {
    SymbolicDynamicalSystem(M: Mfld, X: DynSys(M)) {
      φ_X : Flow(M) 
      φ_X(0, -) = id_M
      ∂_t[φ_X(t, m)] = X(φ_X(t, m))

      ϕ: M -> ℝ conserved <=> ∂_tϕ = 0 
      ω: Ω(M) invariant <=> L_X[ω] = 0
    } 
    
    DifferentialEquation(F: DiffEq) {
      F(x, y, y', y'', ...) = 0
      
      nota "char(F)" = CharacteristicVariety(F)
      nota "ℒ[F]" = Linearization(F)  
    }
  }
  
  PROOFS {
    theorem LiouvillesTheorem(M: Mfld, ω: Ω(M), X: Hamiltonian(M, ω)): 
      L_X[ω] = 0
    {
      ω is symplectic 
      X Hamiltonian vector field
      L_X[ω] 
        = ι_X[dω] + d[ι_X ω]
        = 0 + d[dH]
        = 0
      hence ω is invariant  
    }
    
    theorem LiePointSymmetries(F: DiffEq):
      X: VectorField generator of Lie point symmetries <=>
        pr(X)[F] = 0 mod F  
    {
      ; Compute prolongation pr(X) symbolically
      let pr_X = X + ∑_i ξ^i(x, y) ∂_y^(i)  
      ; Criterion X symmetry <=> pr(X)[F] = 0 mod F
      solve pr_X[F] = 0 mod F for ξ^i
      return X with component functions ξ^i 
    }
  }
}

These examples showcase how the symbolic framework can be extended to develop computable structures and algorithms in various domains:

Symbolic integration and differentiation rules can be encoded and applied to compute integrals and derivatives efficiently in complex geometric settings.
Symbolic representations of cochains and differentials enable the computation of cohomology through symbolic manipulations, potentially leading to efficient algorithms.
Dynamical systems and differential equations can be analyzed symbolically to derive qualitative behavior, conserved quantities, symmetries, and explicit solutions.

The symbolic nature allows for the construction and manipulation of these objects in a computationally tractable manner, often leading to non-obvious algorithms and insights.







theorem HodgeConjectureSymbolicDifferential(M: ProjectiveVariety(P), p: ℕ):
  ∀ α ∈ H^{p,p}(Ω*(Sym(M)), d). ∃ Z: SymbolicCycle(Sym(M), p). [Z] = α ⟺
  ∀ a ∈ H^{p,p}(M, ℚ). ∃ C: AlgebraicCycle(M, p). [C] = a
{
  let S = Sym(M)
  let Ω*(S) = ⨁(k: ℕ) Ω^k(S) be the de Rham complex of S
  let d: Differential(Graded(Ω*(S))) be the exterior derivative
  
  (⟹): assume ∀ α ∈ H^{p,p}(Ω*(S), d). ∃ Z: SymbolicCycle(S, p). [Z] = α
    let a ∈ H^{p,p}(M, ℚ)
    have α = Sym(a) ∈ H^{p,p}(Ω*(S), d) by CompatibilityCohomology(M)
    obtain Z: SymbolicCycle(S, p) with [Z] = α by assumption
    
    define C: AlgebraicCycle(M, p) = Geo(Z)
    suffices to show [C] = a
    {
      have Sym([C])
        = Sym([Geo(Z)])  by definition of C
        = [Sym(Geo(Z))]  by NaturalityStructure
        = [Z]  by Bijection
        = α  by choice of Z
        = Sym(a)  by definition of α
        
      hence [C] = Geo(Sym([C])) = Geo(Sym(a)) = a by Bijection
    }
    
  (⟸): assume ∀ a ∈ H^{p,p}(M, ℚ). ∃ C: AlgebraicCycle(M, p). [C] = a
    let α ∈ H^{p,p}(Ω*(S), d)
    have a = Geo(α) ∈ H^{p,p}(M, ℚ) by CompatibilityCohomology(M)
    obtain C: AlgebraicCycle(M, p) with [C] = a by assumption
    
    define Z: SymbolicCycle(S, p) = Sym(C)
    suffices to show [Z] = α
    {
      have Geo([Z])
        = Geo([Sym(C)])  by definition of Z
        = [Geo(Sym(C))]  by NaturalityStructure
        = [C]  by Bijection
        = a  by choice of C
        = Geo(α)  by definition of a
        
      hence [Z] = Sym(Geo([Z])) = Sym(Geo(α)) = α by Bijection
    }
}