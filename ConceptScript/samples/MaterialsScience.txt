CONCEPT MaterialsScience {
  PARAMETERS {
    k_B : REAL  -- Boltzmann constant
    N_A : REAL  -- Avogadro's number
    e : REAL    -- Elementary charge
  }

  CONTEXT {
    TYPES {
      Element := ENUM {
        H, He, Li, Be, B, C, N, O, F, Ne, // ... (all elements)
      }

      AtomicStructure := STRUCTURE {
        element : Element
        atomic_number : INT
        mass_number : INT
        electron_configuration : List(INT)
      }

      // Commentary: AtomicStructure forms the foundation of materials science,
      // as the properties of materials ultimately depend on their constituent atoms.

      INDUCTIVE BondType {
        CASE Ionic
        CASE Covalent
        CASE Metallic
        CASE VanDerWaals
        CASE Hydrogen
      }

      CrystalSystem := ENUM {
        Cubic, Tetragonal, Orthorhombic, Hexagonal, Trigonal, Monoclinic, Triclinic
      }

      CrystalStructure := STRUCTURE {
        system : CrystalSystem
        lattice_parameters : (REAL, REAL, REAL, REAL, REAL, REAL)  // a, b, c, α, β, γ
        basis : List(AtomicStructure)
      }

      // Commentary: CrystalStructure describes how atoms are arranged in crystalline materials.
      // This arrangement strongly influences a material's properties.

      INDUCTIVE Defect {
        CASE PointDefect(ONEOF { Vacancy, Interstitial, Substitutional })
        CASE LinearDefect(ONEOF { EdgeDislocation, ScrewDislocation })
        CASE PlanarDefect(ONEOF { GrainBoundary, TwinBoundary, StackingFault })
        CASE BulkDefect(ONEOF { Void, Precipitate })
      }

      // Commentary: Defects play a crucial role in determining material properties,
      // often having an outsized influence relative to their concentration.

      MaterialClass := ENUM {
        Metal, Ceramic, Polymer, Composite, Semiconductor
      }

      MechanicalProperties := STRUCTURE {
        youngs_modulus : REAL
        yield_strength : REAL
        ultimate_tensile_strength : REAL
        ductility : REAL
        toughness : REAL
        hardness : REAL
      }

      ThermalProperties := STRUCTURE {
        melting_point : REAL
        thermal_conductivity : REAL
        thermal_expansion_coefficient : REAL
        specific_heat : REAL
      }

      ElectricalProperties := STRUCTURE {
        electrical_conductivity : REAL
        band_gap : REAL
        dielectric_constant : REAL
      }

      OpticalProperties := STRUCTURE {
        refractive_index : REAL
        absorption_spectrum : FUNC(REAL) -> REAL
        emission_spectrum : FUNC(REAL) -> REAL
      }

      Material := STRUCTURE {
        name : STRING
        class : MaterialClass
        composition : MAP(Element, REAL)
        crystal_structure : OPTIONAL(CrystalStructure)
        defects : SET(Defect)
        mechanical_properties : MechanicalProperties
        thermal_properties : ThermalProperties
        electrical_properties : ElectricalProperties
        optical_properties : OpticalProperties
      }
    }

    STRUCTURES {
      STRUCTURE AtomicBonding {
        FUNC bond_energy(a1 : AtomicStructure, a2 : AtomicStructure, type : BondType) -> REAL

        AXIOM BondStrengthOrder {
          ∀ a1 a2 : AtomicStructure .
            bond_energy(a1, a2, Ionic) > bond_energy(a1, a2, Covalent) >
            bond_energy(a1, a2, Metallic) > bond_energy(a1, a2, Hydrogen) >
            bond_energy(a1, a2, VanDerWaals)
        }
      }

      // Commentary: The type and strength of atomic bonds fundamentally determine
      // a material's properties, from melting point to electrical conductivity.

      STRUCTURE CrystalGeometry {
        FUNC calculate_density(cs : CrystalStructure) -> REAL
        FUNC miller_indices(plane : (INT, INT, INT)) -> REAL
        FUNC bragg_diffraction(cs : CrystalStructure, λ : REAL, θ : REAL) -> BOOL

        AXIOM BraggLaw {
          ∀ cs : CrystalStructure, λ : REAL, θ : REAL .
            bragg_diffraction(cs, λ, θ) ⇔ 
              ∃ n : INT . n * λ = 2 * d * SIN(θ)
              WHERE d = interplanar_spacing(cs)
        }
      }

      // Commentary: Crystal geometry is crucial for understanding and predicting
      // material properties, as well as for material characterization techniques
      // like X-ray diffraction.

      STRUCTURE PhaseTransformations {
        FUNC gibbs_free_energy(T : REAL, P : REAL, composition : MAP(Element, REAL)) -> REAL
        FUNC phase_diagram(elements : List(Element)) -> FUNC(REAL, REAL) -> MaterialClass

        AXIOM GibbsPhaseRule {
          ∀ system : SET(Element), P : INT .
            F = C - P + 2
            WHERE F = degrees_of_freedom(system)
                  C = LEN(system)
                  P = number_of_phases(system)
        }
      }

      // Commentary: Understanding phase transformations is key to material processing
      // and for predicting material behavior under different conditions.

      STRUCTURE MechanicalBehavior {
        FUNC stress_strain_curve(m : Material) -> FUNC(REAL) -> REAL
        FUNC fatigue_life(m : Material, stress_amplitude : REAL) -> INT

        AXIOM HallPetchRelation {
          ∀ m : Material .
            m.mechanical_properties.yield_strength = σ_0 + k * d^(-1/2)
            WHERE σ_0 = friction stress
                  k = strengthening coefficient
                  d = average grain size
        }
      }

      // Commentary: Mechanical behavior determines a material's performance in structural
      // applications and its failure modes.

      STRUCTURE ElectronicStructure {
        FUNC density_of_states(m : Material) -> FUNC(REAL) -> REAL
        FUNC band_structure(m : Material) -> FUNC(REAL^3) -> REAL

        AXIOM FermiDiracDistribution {
          ∀ E : REAL, T : REAL .
            f(E) = 1 / (1 + EXP((E - E_F) / (k_B * T)))
            WHERE E_F = fermi_energy(m)
        }
      }

      // Commentary: Electronic structure is crucial for understanding electrical,
      // optical, and magnetic properties, especially in semiconductors and metals.
    }

    NOTATION {
      σ := Stress
      ε := Strain
      ρ := Density
      λ := Wavelength
      θ := Angle
      ∇ := Gradient
    }

    ASSERTIONS {
      AXIOM StructurePropertyRelationship {
        ∀ m : Material .
          m.crystal_structure DETERMINES m.mechanical_properties ∧
          m.crystal_structure DETERMINES m.thermal_properties ∧
          m.crystal_structure DETERMINES m.electrical_properties
      }

      // Commentary: The structure-property relationship is a central tenet of
      // materials science, linking atomic arrangements to macroscopic properties.

      AXIOM LawOfMixturesComposites {
        ∀ m : Material, p : PROPERTY .
          m.class = Composite ⇒
            p(m) = Σ(volume_fraction(i) * p(component(i)))
            WHERE i ranges over components of m
      }

      // Commentary: The law of mixtures is a simple but often effective way to
      // estimate composite material properties based on their constituents.
    }
  }

  TRANSFORMERS {
    REWRITE DiffusionCoefficient(m : Material, T : REAL) -> REAL :=
      D_0 * EXP(-Q / (R * T))
      WHERE D_0 = pre_exponential_factor(m)
            Q = activation_energy(m)
            R = gas_constant

    // Commentary: This Arrhenius-type equation describes how diffusion in materials
    // depends strongly on temperature, which is crucial for many material processes.

    SIMPLIFY ThermalStress(m : Material, ΔT : REAL) -> REAL :=
      m.mechanical_properties.youngs_modulus * 
      m.thermal_properties.thermal_expansion_coefficient * ΔT

    // Commentary: Thermal stress is a common cause of material failure and must be
    // considered in any application with temperature variations.
  }

  PROOFS {
    THEOREM SchmidLaw {
      ∀ m : Material, σ : REAL, φ : REAL, λ : REAL .
        IS_SINGLE_CRYSTAL(m) ⇒
          τ_CRSS = σ * COS(φ) * COS(λ)
          WHERE τ_CRSS = critical_resolved_shear_stress(m)
    }
    PROOF {
      // Decompose applied stress into shear component on slip plane
      // Consider geometry of slip system
      // Apply force balance
      □
    }

    // Commentary: Schmid's Law is crucial for understanding the onset of plastic
    // deformation in single crystals, relating the applied stress to the critical
    // resolved shear stress on slip systems.

    THEOREM GibbsThomsonEffect {
      ∀ r : REAL, γ : REAL, V_m : REAL, R : REAL, T : REAL .
        ΔT = (2 * γ * V_m) / (r * ΔH_f)
        WHERE ΔT = melting point depression
              γ = surface energy
              V_m = molar volume
              ΔH_f = latent heat of fusion
    }
    PROOF {
      // Consider the change in chemical potential due to curvature
      // Apply the Clausius-Clapeyron equation
      // Assume ΔH_f is constant over small temperature range
      □
    }

    // Commentary: The Gibbs-Thomson effect explains why small particles have lower
    // melting points than bulk materials, which is important in nanotechnology.
  }

  EXAMPLES {
    EXAMPLE Steel {
      Material {
        name = "AISI 1045 Steel",
        class = MaterialClass.Metal,
        composition = {
          Fe -> 0.98,
          C -> 0.02,  // 0.45 wt% carbon
          Mn -> 0.008,
          Si -> 0.003
        },
        crystal_structure = CrystalStructure {
          system = CrystalSystem.Cubic,
          lattice_parameters = (2.87e-10, 2.87e-10, 2.87e-10, π/2, π/2, π/2),
          basis = [
            AtomicStructure { element = Element.Fe, ... },
            AtomicStructure { element = Element.C, ... }  // Interstitial
          ]
        },
        defects = {
          Defect.LinearDefect(EdgeDislocation),
          Defect.PlanarDefect(GrainBoundary)
        },
        mechanical_properties = MechanicalProperties {
          youngs_modulus = 200e9,  // Pa
          yield_strength = 505e6,  // Pa
          ultimate_tensile_strength = 585e6,  // Pa
          ductility = 0.12,  // 12% elongation
          toughness = 54e6,  // J/m^3
          hardness = 170  // Brinell
        },
        thermal_properties = ThermalProperties {
          melting_point = 1723,  // K
          thermal_conductivity = 49.8,  // W/(m·K)
          thermal_expansion_coefficient = 11.5e-6,  // 1/K
          specific_heat = 486  // J/(kg·K)
        },
        electrical_properties = ElectricalProperties {
          electrical_conductivity = 5.8e6,  // S/m
          band_gap = 0,  // Metallic
          dielectric_constant = COMPLEX(1, 1e7)  // High imaginary part due to conductivity
        },
        optical_properties = OpticalProperties {
          refractive_index = COMPLEX(2.92, 3.11),
          absorption_spectrum = λ -> ...,  // Function of wavelength
          emission_spectrum = λ -> ...   // Function of wavelength
        }
      }
    }

    // Commentary: This example showcases how the Material structure can be used to
    // comprehensively describe a real material (AISI 1045 steel), including its
    // composition, structure, and various properties.
  }
}