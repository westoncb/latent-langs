CONCEPT GeometricHolographicSpaces {
  PARAMETERS {
    d : Nat -- Ambient dimension 
    N : Nat -- Rank of the gauge group
    R : Real -- AdS radius
    Œ±' : Real -- String scale squared
    g_s : Real -- String coupling  
  }

  CONTEXT {
    TYPES {
      Space := CS(‚Ñù^d)
      Direction := {v ‚àà ùïä^(d-1)}
      Subspace(n : Nat) := {S ‚àà Space | dim(S) = n}  
      
      CellComplex {
        SCALAR_FIELD Cells : Set(Subspace)
        SCALAR_FIELD BoundaryMap : FUNC(Subspace, Subspace) 
        STRUCTURE_FIELD CW : INDUCTIVE {
          CASE Point : Cells(0)  
          CASE Attach(œï : FUNC(ùïä^(n-1), Subspace(n-1)), b : Cells(n)) : Cells(n)
        }
        AXIOM BoundaryOfBoundaryIsEmpty {
          FORALL (c : Cells) . BoundaryMap(BoundaryMap(c)) = ‚àÖ
        }
      }

      Network {
        SCALAR_FIELD Nodes : CellComplex
        SCALAR_FIELD Edges : FUNC(Nodes.Cells(0), Nodes.Cells(0))
        AXIOM LocallyFinite {
          FORALL (v : Nodes.Cells(0)) . FINITE({w | (v, w) ‚àà Edges})  
        }
      } 

      Embedding(M N : Space) := FUNC(M, N)

      Diagram(C D : Category) {
        SCALAR_FIELD Objects : FUNC(C.Objects, D.Objects)
        SCALAR_FIELD Morphisms : FUNC(C.Morphisms, D.Morphisms)
        AXIOM Functorial {
          Morphisms(f ‚àò g) = Morphisms(f) ‚àò Morphisms(g)
          Morphisms(id_X) = id_{Objects(X)}
        }
      }
    }
    
    STRUCTURES {      
      STRUCTURE AdSCFTGeometry {
        SCALAR_FIELD Boundary : Subspace(d-1)
        SCALAR_FIELD Bulk : Space
        SCALAR_FIELD BulkRadius : Real
        STRUCTURE_FIELD PoincarePatch : {
          SCALAR_FIELD Embedding : Embedding(‚Ñç^d, Bulk)
          AXIOM IsometricEmbedding(u v : ‚Ñç^d) {
            d_H(u, v) = d_Bulk(Embedding(u), Embedding(v))
          } 
        }

        AXIOM AdSMetric(x : Bulk) {
          g_Bulk(x) = (R^2 / r(x)^2) dr(x)^2 + r(x)^2 / R^2 g_ùïä(Œ∏(x)) 
          WHERE (r, Œ∏) = PoincarePatch.Embedding^(-1)(x)
        }
        AXIOM BoundaryLimit {
          lim_{r -> ‚àû} PoincarePatch.Embedding(‚Ñç^d) = Boundary  
        }
      }
      
      STRUCTURE RealizationDiagram EXTENDS Diagram(Net, Space) {
        IMPLEMENT Objects := v ‚Ü¶ v.Subspace
        IMPLEMENT Morphisms := e ‚Ü¶ (u ‚Ü¶ e.Embedding(u))

        AXIOM IncidenceCompatibility {
          FORALL (e : Net.Edges, c : e.Domain.BoundaryMap.Fiber(e.Codomain)) .
            e.Embedding(c) ‚äÜ ‚àÇ(e.Codomain.Subspace)
        }
      }

      STRUCTURE Tensor(k l : Nat) EXTENDS FUNC(V^k √ó V*^l, F) {
        SCALAR_FIELD Components : F^(Dim(V)^(k+l))
        IMPLEMENT MultilinearMap WITH {
          FORALL (i : Fin(k), j : Fin(l), m_i : V, œâ^j : V*) .
            Apply(m_0, ..., œâ^0, ...) = Œ£_{i,j} Components[i,j] m_0[i_0] ... œâ^0[j_0] ...
        }
      }

      STRUCTURE Correlator {
        SCALAR_FIELD FieldMap : FUNC(Fields, Subspace(0) -> Tensor(*))
        SCALAR_FIELD nPoint(n : Nat) : FUNC(Fields^n √ó (Subspace(0))^n, F)
          WITH nPoint œïs xs = ‚ü®Œ†_i FieldMap(œï_i)(x_i)‚ü©  
        AXIOM ConformalCovariance(g : Conf(d)) {
          nPoint(œïs, xs) = Œ†_i J[g](x_i)^{Œî_i} nPoint(œïs, g(xs))
        }
        AXIOM CrossingSymmetry {
          nPoint(œïs, xs) = nPoint(œÉ(œïs), œÉ(xs)) 
        }
      }
    }
  }

  TRANSFORMERS {
    REWRITE CorrelatorTensorProduct {
      (‚ü®Œ†_i œï_i(x_i)‚ü© ‚ü®Œ†_j œà_j(y_j)‚ü©) <=>
        ‚ü®Œ†_i œï_i(x_i) Œ†_j œà_j(y_j)‚ü©
    }

    REWRITE OperatorStateCorrespondence(œà : Hilbert, x : Subspace(0)) {
      ‚ü®œà|œï(x)|0‚ü© <=> œï[x ‚Üí 1](|œà‚ü©)
    }
  }
  
  PROOFS {  
    THEOREM RealizabilityTheorem {
      FORALL (N : Network, X : Space, R R' : RealizationDiagram(N, X)) .     
        R ‚âÖ R' IFF (
          FORALL (v : N.Nodes) . R.Objects(v) ‚âÖ R'.Objects(v)
          FORALL (e : N.Edges) . R.Morphisms(e) ‚âÉ R'.Morphisms(e)
        )
    }
    PROOF {
      DEFINE HomSpace(R R' : RealizationDiagram) := {
        Œ∑ : FUNC(N.Nodes, X.Morphisms) |
        FORALL (e : N.Edges) . Œ∑(e.Codomain) ‚àò R.Morphisms(e) = R'.Morphisms(e) ‚àò Œ∑(e.Domain)
      }

      ASSUME R R' : RealizationDiagram(N, X),
             ObjectIsos : FORALL (v : N.Nodes) . R.Objects(v) ‚âÖ R'.Objects(v),
             MorphismHtpys : FORALL (e : N.Edges) . R.Morphisms(e) ‚âÉ R'.Morphisms(e)

      ObjectIsos 
        ‚áí FORALL (v : N.Nodes) . ‚àÉ! (Œ∑_v : R.Objects(v) -> R'.Objects(v)) iso 
      MorphismHtpys
        ‚áí FORALL (e : N.Edges) . 
            Œ∑_(e.Codomain) ‚àò R.Morphisms(e) ‚âÉ R'.Morphisms(e) ‚àò Œ∑_(e.Domain)
      
      ‚áí ‚àÉ! (Œ∑ : HomSpace(R, R')) . Œ∑ : R ‚âÖ R'

      ‚áê ASSUME Œ∑ : R ‚âÖ R'
         FORALL (v : N.Nodes) . 
           R.Objects(v) ‚âÖ_{Œ∑_v} R'.Objects(v)
         FORALL (e : N.Edges) .
           R.Morphisms(e) ‚âÉ_{H_e} R'.Morphisms(e)
           WHERE H_e(t) := Œ∑_(e.Codomain) ‚àò R.Morphisms(e) ‚àò Œ∑_(e.Domain)‚Åª¬π 
    }

    THEOREM RiemannHilbertCorrespondence {
      FORALL (X : AdSCFTGeometry, œïs : Correlators.Fields) .
        ‚àÉ! (G : FUNC(X.Bulk^n, F)) . 
          FORALL (xs : X.Boundary^n) .
            lim_{x_i -> X.Boundary} G(x_1, ..., x_n) = Correlators.nPoint(œïs, xs)  
    }
    PROOF {
      ASSUME X : AdSCFTGeometry, œïs : Correlators.Fields

      DEFINE G(x_1, ..., x_n) := ‚à´_{Œ≥_1, ..., Œ≥_n} 
        K(x_1, y_1) ... K(x_n, y_n) Correlators.nPoint(œïs, y_1, ..., y_n)
      WHERE Œ≥_i : [0, ‚àû] -> X.Bulk with
        Œ≥_i(0) = x_i, lim_{t -> ‚àû} Œ≥_i(t) ‚àà X.Boundary
      AND K(x, y) := C R^{d-1} ((1 - |w|^2) / |x - w|^2)^Œî
        WHERE (r, w) = X.PoincarePatch.Embedding^(-1)(y)

      THEN lim_{x_i -> X.Boundary} G(x_1, ..., x_n)
             = lim_{x_i -> X.Boundary} ‚à´_{Œ≥_1, ..., Œ≥_n} 
                K(x_1, y_1) ... K(x_n, y_n) Correlators.nPoint(œïs, y_1, ..., y_n) [BY DEF G]
             = ‚à´_{X.Boundary} K(x_1, y_1) ... K(x_n, y_n) Correlators.nPoint(œïs, y_1, ..., y_n) 
               [DOMINATED CONVERGENCE, LIMIT INTEGRAL EXCHANGE]
             = Correlators.nPoint(œïs, x_1, ..., x_n)
               [BY K|_{X.Boundary} = Œ¥, FUNDAMENTAL THEOREM OF CALCULUS]

      UNIQUENESS_OF G {
        ASSUME G' also satisfies boundary condition
        SUFFICES_TO_SHOW G' = G
        
        G'(x_1, ..., x_n) - G(x_1, ..., x_n) 
          = ‚à´_{Œ≥_1, ..., Œ≥_n} K(x_1, y_1) ... K(x_n, y_n) (G'(y_1, ..., y_n) - G(y_1, ..., y_n))
            [BY INTEGRAL OPERATOR PROPERTY]
          = 0 
            [BY INDUCTION ON BULK DEPTH, G'|_{X.Boundary} = G|_{X.Boundary}]
          QED  
      }
    }
  }

  EXAMPLES {
    EXAMPLE HyperbolicSpace {
      DEFINE X = ‚Ñç^d
      DEFINE Ideal_Boundary(X) := {x : X | x_d = 0}
      DEFINE g_X(x)(v, w) := (1/x_d^2) ‚ü®v, w‚ü©_{‚Ñù^d} 
      DEFINE vol_X(x) := dx_1 ‚àß ... ‚àß dx_n / x_d^d

      THEN (X, g_X, vol_X, Ideal_Boundary(X)) satisfies AdSCFTGeometry
    }

    EXAMPLE NetworkEmbedding {
      DEFINE N : Network WITH {
        Nodes := {v_0, v_1, v_2, v_3, v_4}
        Edges := {(v_i, v_j) | i < j}  
      }
      DEFINE ‚Ñç¬≥ : Space
      DEFINE R : RealizationDiagram(N, ‚Ñç¬≥) WITH {
        Objects(v_i) := B(p_i, r_i) 
        Morphisms(e) := Cone(B(p_i, r_i), B(p_j, r_j))
        WHERE {p_i} ‚äÇ ‚Ñç¬≥, {r_i} ‚äÇ ‚Ñù‚Çä chosen s.t. B(p_i, r_i) ‚à© B(p_j, r_j) =/= ‚àÖ IFF v_i ~ v_j
      } SATISFYING IncidenceCompatibility

      THEN R describes a 3D hyperbolic network embedding of N
    }  
  }
}