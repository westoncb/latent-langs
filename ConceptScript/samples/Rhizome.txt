CONCEPT Rhizome {
  PARAMETERS {
    Element : TYPE
    Connection : TYPE
    Multiplicity : TYPE
  }

  CONTEXT {
    TYPES {
      RhizomeStructure := STRUCTURE {
        FIELD elements : SET(Element)
        FIELD connections : SET(Connection)
        FIELD multiplicities : SET(Multiplicity)
      }

      INDUCTIVE Principle {
        CASE Connection
        CASE Heterogeneity
        CASE Multiplicity
        CASE AsignifyingRupture
        CASE Cartography
        CASE Decalcomania
      }

      Assemblage := SET(Element)

      Plateau := STRUCTURE {
        FIELD elements : SET(Element)
        FIELD intensity : REAL
      }

      LineOfFlight := FUNC(RhizomeStructure) -> RhizomeStructure

      Arborescence := STRUCTURE {
        FIELD root : Element
        FIELD branches : SET((Element, Element))
      }

      Mapping := FUNC(RhizomeStructure) -> SET(Plateau)

      INDUCTIVE Becoming {
        CASE Imperceptible
        CASE Animal
        CASE Intense
      }
    }

    STRUCTURES {
      STRUCTURE RhizomaticThought IMPLEMENTS RhizomeStructure {
        FUNC connect(e1 : Element, e2 : Element) -> Connection
        FUNC rupture(c : Connection) -> (RhizomeStructure, RhizomeStructure)
        FUNC map() -> Mapping

        AXIOM NonHierarchical {
          ∀ e1, e2 ∈ elements . ¬∃ hierarchy : RELATION . hierarchy(e1, e2)
        }

        AXIOM AlwaysMiddle {
          ∀ e ∈ elements . ∃ c1, c2 ∈ connections .
            (e ∈ c1 ∧ e ∈ c2 ∧ c1 ≠ c2)
        }

        AXIOM Heterogeneity {
          ∃ t1, t2 : TYPE . t1 ≠ t2 ∧
          ∃ e1, e2 ∈ elements . e1 IS_A t1 ∧ e2 IS_A t2
        }
      }

      STRUCTURE Deterritorialization {
        FUNC deterritorialize(r : RhizomeStructure) -> LineOfFlight

        AXIOM ConstantDeterritorialization {
          ∀ r : RhizomeStructure . 
            LET r' = deterritorialize(r)(r)
            IN r' ≠ r ∧ ∃ e ∈ r'.elements . e ∉ r.elements
        }
      }

      STRUCTURE Reterritorialization {
        FUNC reterritorialize(l : LineOfFlight) -> RhizomeStructure

        AXIOM NotOriginalTerritory {
          ∀ r : RhizomeStructure, l : LineOfFlight . 
            LET r' = reterritorialize(l)
            IN r' ≠ r
        }
      }

      STRUCTURE RhizomaticBecoming IMPLEMENTS Becoming {
        FUNC become(r : RhizomeStructure, b : Becoming) -> RhizomeStructure

        AXIOM TransformativeBecoming {
          ∀ r : RhizomeStructure, b : Becoming .
            LET r' = become(r, b)
            IN |r'.multiplicities| > |r.multiplicities|
        }
      }
    }

    NOTATION {
      D&G := "Deleuze and Guattari"
      n-1 := "Subtract the one from the multiplicity"
    }

    ASSERTIONS {
      AXIOM AntiGenealogy {
        ∀ r : RhizomeStructure . ¬∃ root : Element . 
          ∀ e ∈ r.elements . PATH_EXISTS(root, e)
      }

      AXIOM Acentricity {
        ∀ r : RhizomeStructure . ¬∃ center : Element .
          ∀ e ∈ r.elements . DISTANCE(center, e) < INFINITY
      }

      AXIOM NomadThought {
        ∀ r : RhizomeStructure . ∃ l : LineOfFlight .
          l(r) ≠ r
      }
    }
  }

  TRANSFORMERS {
    REWRITE RhizomaticAnalysis(text : String) -> RhizomeStructure {
      LET elements = EXTRACT_CONCEPTS(text)
      LET connections = GENERATE_CONNECTIONS(elements)
      LET multiplicities = IDENTIFY_MULTIPLICITIES(elements, connections)
      IN RhizomeStructure {
        elements = elements,
        connections = connections,
        multiplicities = multiplicities
      }
    }

    SIMPLIFY Arborify(r : RhizomeStructure) -> Arborescence {
      LET root = CHOOSE e FROM r.elements
      LET branches = GENERATE_HIERARCHY(r.connections, root)
      IN Arborescence {
        root = root,
        branches = branches
      }
    }

    REWRITE CreatePlateau(r : RhizomeStructure, intensity : REAL) -> Plateau {
      LET elements = FILTER(r.elements, λ e . INTENSITY(e) ≥ intensity)
      IN Plateau {
        elements = elements,
        intensity = intensity
      }
    }
  }

  PROOFS {
    THEOREM RhizomeIsNonTotalizable {
      ∀ r : RhizomeStructure . ¬∃ description : String .
        FULLY_DESCRIBES(description, r)
    }
    PROOF {
      GIVEN r : RhizomeStructure
      
      <1>. ASSUME ∃ description : String . FULLY_DESCRIBES(description, r)
      <2>. This would imply a totalization of the rhizome
      <3>. BY Acentricity, no single point can encompass the entire rhizome
      <4>. BY NomadThought, the rhizome is always in flux
      <5>. HENCE no fixed description can fully capture r
      <6>. This contradicts <1>
      <7>. CONCLUDE ¬∃ description : String . FULLY_DESCRIBES(description, r)
      QED
    }

    THEOREM RhizomeVsArborescence {
      ∀ r : RhizomeStructure . 
        LET a = Arborify(r)
        IN ∃ e ∈ r.elements . e ∉ a.branches
    }
    PROOF {
      GIVEN r : RhizomeStructure
      LET a = Arborify(r)
      
      <1>. BY AntiGenealogy, r has no root element
      <2>. Arborify imposes a root and hierarchy
      <3>. HENCE ∃ connections ∈ r.connections that are not in a.branches
      <4>. These connections involve elements not in the arborescent structure
      <5>. CONCLUDE ∃ e ∈ r.elements . e ∉ a.branches
      QED
    }

    THEOREM BecomingRhizome {
      ∀ s : STRUCTURE . ∃ r : RhizomeStructure .
        LIMIT(REPEAT(Deterritorialization().deterritorialize, s)) = r
    }
    PROOF {
      GIVEN s : STRUCTURE
      
      <1>. LET process = REPEAT(Deterritorialization().deterritorialize, s)
      <2>. BY ConstantDeterritorialization, each step adds new elements
      <3>. This process increases multiplicity and heterogeneity
      <4>. ASSUME LIMIT(process) = l
      <5>. l must satisfy all Rhizome principles:
        <5>1. Connection and Heterogeneity: BY <2> and <3>
        <5>2. Multiplicity: BY n-1 principle, always subtracting unity
        <5>3. Asignifying Rupture: BY ConstantDeterritorialization
        <5>4. Cartography and Decalcomania: BY construction of process
      <6>. HENCE l IS_A RhizomeStructure
      <7>. CONCLUDE ∃ r : RhizomeStructure . LIMIT(process) = r
      QED
    }
  }

  EXAMPLES {
    EXAMPLE AThousandPlateaus {
      LET text = "A Thousand Plateaus by Deleuze and Guattari"
      LET rhizome = RhizomaticAnalysis(text)

      ASSERT |rhizome.elements| > 1000  -- More concepts than just the plateaus
      ASSERT ∀ e ∈ rhizome.elements . ∃ c ∈ rhizome.connections . e ∈ c
      ASSERT ∃ m ∈ rhizome.multiplicities . m IS_A "Conceptual_Multiplicity"

      LET plateaus = rhizome.map()

      ASSERT |plateaus| = 15  -- The book has 15 main plateaus
      ASSERT ∀ p ∈ plateaus . p.intensity ≠ 0
    }

    EXAMPLE InternetAsRhizome {
      LET internet = RhizomeStructure {
        elements = SET(["websites", "users", "data_packets", "protocols"]),
        connections = SET(["hyperlinks", "social_connections", "data_transfers"]),
        multiplicities = SET(["information_flows", "user_interactions", "technological_evolutions"])
      }

      LET deterritorialization = Deterritorialization().deterritorialize(internet)
      LET reterritorialization = Reterritorialization().reterritorialize(deterritorialization)

      ASSERT reterritorialization ≠ internet
      ASSERT ∃ e ∈ reterritorialization.elements . e ∉ internet.elements
      ASSERT ∀ e ∈ internet.elements . ∃ c ∈ internet.connections . e ∈ c

      LET becoming = RhizomaticBecoming().become(internet, Becoming.Imperceptible)

      ASSERT |becoming.multiplicities| > |internet.multiplicities|
    }

    EXAMPLE RhizomaticLearning {
      LET traditional_education = Arborescence {
        root = "Fundamental_Knowledge",
        branches = SET([
          ("Fundamental_Knowledge", "Mathematics"),
          ("Fundamental_Knowledge", "Language"),
          ("Mathematics", "Algebra"),
          ("Mathematics", "Geometry"),
          ("Language", "Grammar"),
          ("Language", "Literature")
        ])
      }

      LET rhizomatic_learning = RhizomeStructure {
        elements = SET(["Mathematics", "Language", "Art", "Science", "Philosophy", "Technology"]),
        connections = SET([
          ("Mathematics", "Art"),
          ("Language", "Technology"),
          ("Science", "Philosophy"),
          ("Art", "Science"),
          ("Philosophy", "Mathematics"),
          ("Technology", "Art")
        ]),
        multiplicities = SET(["Interdisciplinary_Concepts", "Learning_Styles", "Cultural_Contexts"])
      }

      ASSERT ∃ e ∈ rhizomatic_learning.elements . e ∉ FLATTEN(traditional_education.branches)
      ASSERT ∀ e ∈ rhizomatic_learning.elements . 
        COUNT(c ∈ rhizomatic_learning.connections : e ∈ c) ≥ 2

      LET plateau = CreatePlateau(rhizomatic_learning, 0.8)

      ASSERT |plateau.elements| < |rhizomatic_learning.elements|
      ASSERT plateau.intensity = 0.8
    }
  }
}