CONCEPT Thermodynamics {
  PARAMETERS {
    R : REAL  -- Universal gas constant
    k_B : REAL  -- Boltzmann constant
    N_A : REAL  -- Avogadro's number
  }

  CONTEXT {
    // We start with the fundamental concepts and build up from there
    TYPES {
      Temperature := REAL  // in Kelvin
      Pressure := REAL     // in Pascal
      Volume := REAL       // in m^3
      Energy := REAL       // in Joules
      Entropy := REAL      // in J/K
      Mass := REAL         // in kg
      MolarMass := REAL    // in kg/mol

      // A system is the fundamental unit of study in thermodynamics
      System := STRUCTURE {
        boundary : ENUM { CLOSED, OPEN, ISOLATED }
        state_variables : StateVariables
        composition : MAP(Substance, Mass)
      }

      StateVariables := STRUCTURE {
        T : Temperature
        P : Pressure
        V : Volume
        U : Energy  // Internal energy
        S : Entropy
        H : Energy  // Enthalpy
        G : Energy  // Gibbs free energy
      }

      Substance := STRUCTURE {
        name : STRING
        molar_mass : MolarMass
        specific_heat_capacity : REAL
      }

      Process := ENUM {
        ISOTHERMAL, ISOBARIC, ISOCHORIC, ADIABATIC, ISENTROPIC
      }

      Cycle := List(Process)

      HeatEngine := STRUCTURE {
        hot_reservoir : Temperature
        cold_reservoir : Temperature
        cycle : Cycle
        efficiency : REAL
      }
    }

    // Fundamental laws and principles of thermodynamics
    STRUCTURES {
      STRUCTURE ZerothLaw {
        AXIOM ThermalEquilibrium {
          ∀ A, B, C : System .
            IN_EQUILIBRIUM(A, B) ∧ IN_EQUILIBRIUM(B, C) ⇒ IN_EQUILIBRIUM(A, C)
        }
        
        // Commentary: The Zeroth Law establishes the concept of thermal equilibrium,
        // which is fundamental to the idea of temperature. It states that if two systems
        // are in thermal equilibrium with a third system, they are in thermal equilibrium
        // with each other.
      }

      STRUCTURE FirstLaw {
        FUNC energy_balance(initial : StateVariables, final : StateVariables,
                            Q : Energy, W : Energy) -> BOOL {
          final.U - initial.U = Q - W
        }

        AXIOM ConservationOfEnergy {
          ∀ sys : System, Q : Energy, W : Energy .
            LET initial = sys.state_variables
                final = AFTER_PROCESS(sys).state_variables
            IN energy_balance(initial, final, Q, W)
        }

        // Commentary: The First Law of Thermodynamics is essentially the law of
        // conservation of energy applied to thermodynamic systems. It states that
        // the change in internal energy of a system is equal to the heat added to
        // the system minus the work done by the system.
      }

      STRUCTURE SecondLaw {
        AXIOM EntropyIncrease {
          ∀ sys : System, process : Process .
            sys.boundary = ISOLATED ⇒ ENTROPY(AFTER_PROCESS(sys)) ≥ ENTROPY(sys)
        }

        FUNC carnot_efficiency(T_h : Temperature, T_c : Temperature) -> REAL {
          1 - T_c / T_h
        }

        AXIOM CarnotEfficiency {
          ∀ engine : HeatEngine .
            engine.efficiency ≤ carnot_efficiency(engine.hot_reservoir, engine.cold_reservoir)
        }

        // Commentary: The Second Law introduces the concept of entropy and places
        // constraints on the direction of natural processes. It explains why some
        // processes occur spontaneously while others do not. The Carnot efficiency
        // represents the maximum possible efficiency for any heat engine operating
        // between two temperature reservoirs.
      }

      STRUCTURE ThirdLaw {
        AXIOM ZeroEntropy {
          ∀ sys : System .
            LIMIT(sys.state_variables.T, 0) ⇒ LIMIT(sys.state_variables.S, 0)
        }

        // Commentary: The Third Law states that the entropy of a perfect crystal
        // at absolute zero temperature is zero. This law provides an absolute
        // reference point for the determination of entropy at other temperatures.
      }

      // Equations of state relate state variables to each other
      STRUCTURE EquationsOfState {
        FUNC ideal_gas_law(n : REAL, T : Temperature, P : Pressure, V : Volume) -> BOOL {
          P * V = n * R * T
        }

        FUNC van_der_waals(n : REAL, T : Temperature, P : Pressure, V : Volume, 
                           a : REAL, b : REAL) -> BOOL {
          (P + a * (n/V)^2) * (V - n*b) = n * R * T
        }

        // Commentary: Equations of state, like the ideal gas law and van der Waals
        // equation, describe the relationship between state variables. The ideal gas
        // law is simpler but less accurate for real gases, while the van der Waals
        // equation accounts for molecular size and interactions.
      }
    }

    NOTATION {
      Δ := Change in
      ∂ := Partial derivative
      ∫ := Integral
      Σ := Sum
      ∞ := Infinity
      ∝ := Proportional to
    }

    // Key thermodynamic relations and principles
    ASSERTIONS {
      AXIOM EquipartitionOfEnergy {
        ∀ sys : System, DOF : INT .
          sys.state_variables.U ≈ DOF * 1/2 * k_B * sys.state_variables.T * N_particles(sys)
      }

      // Commentary: The equipartition theorem relates the average energy per degree
      // of freedom to the temperature, providing a link between microscopic and
      // macroscopic descriptions of a system.

      AXIOM MaxwellRelations {
        ∀ sys : System .
          (∂sys.state_variables.U/∂sys.state_variables.V)_T = 
            sys.state_variables.T * (∂sys.state_variables.P/∂sys.state_variables.T)_V - sys.state_variables.P
        ∧ (∂sys.state_variables.H/∂sys.state_variables.P)_T = 
            sys.state_variables.V - sys.state_variables.T * (∂sys.state_variables.V/∂sys.state_variables.T)_P
        ∧ (∂sys.state_variables.G/∂sys.state_variables.P)_T = sys.state_variables.V
        ∧ (∂sys.state_variables.G/∂sys.state_variables.T)_P = -sys.state_variables.S
      }

      // Commentary: The Maxwell relations are a set of equations that relate partial
      // derivatives of thermodynamic quantities. They are extremely useful in
      // deriving various thermodynamic relationships and in solving practical problems.
    }
  }

  // Transformations representing key thermodynamic processes
  TRANSFORMERS {
    REWRITE IsothermalProcess(sys : System, ΔV : Volume) -> System {
      LET final_V = sys.state_variables.V + ΔV
          final_P = sys.state_variables.P * sys.state_variables.V / final_V
      IN System {
        sys with state_variables.V = final_V, 
                  state_variables.P = final_P
      }
    }

    SIMPLIFY AdiabaticProcess(sys : System, γ : REAL, ΔV : Volume) -> System {
      LET final_V = sys.state_variables.V + ΔV
          final_P = sys.state_variables.P * (sys.state_variables.V / final_V)^γ
          final_T = sys.state_variables.T * (final_V / sys.state_variables.V)^(1-γ)
      IN System {
        sys with state_variables.V = final_V,
                  state_variables.P = final_P,
                  state_variables.T = final_T
      }
    }

    // Commentary: These transformers represent key thermodynamic processes.
    // The isothermal process occurs at constant temperature, while the adiabatic
    // process occurs without heat transfer. The adiabatic process is characterized
    // by the ratio of specific heats, γ.

    REWRITE EntropyChange(initial : StateVariables, final : StateVariables) -> Entropy {
      ∫(initial.T -> final.T) (∂Q/T)
    }

    // Commentary: This transformer calculates the change in entropy between two
    // states. For reversible processes, this is equal to the integral of dQ/T.
  }

  // Key thermodynamic principles demonstrated through proofs
  PROOFS {
    THEOREM ClausiusInequality {
      ∀ sys : System, cycle : Cycle .
        ∮(cycle) (∂Q/T) ≤ 0
    }
    PROOF {
      <1> For any cyclic process, ΔS_system = 0
      <2> ∂Q/T = dS_system + dS_surroundings
      <3> ∮(cycle) dS_system = 0 (cyclic process)
      <4> ∮(cycle) (∂Q/T) = ∮(cycle) dS_surroundings
      <5> By Second Law, dS_surroundings ≥ 0
      ∴ ∮(cycle) (∂Q/T) ≤ 0
      □
    }

    // Commentary: The Clausius Inequality is a mathematical statement of the Second
    // Law of Thermodynamics. It states that for any cyclic process, the integral
    // of dQ/T is less than or equal to zero, with equality holding for reversible processes.

    THEOREM ImpossibilityOfPerpetualMotion {
      ∄ engine : HeatEngine .
        engine.efficiency > carnot_efficiency(engine.hot_reservoir, engine.cold_reservoir)
    }
    PROOF {
      ASSUME ∃ engine : HeatEngine . 
        engine.efficiency > carnot_efficiency(engine.hot_reservoir, engine.cold_reservoir)
      <1> This engine would violate the Second Law
      <2> It could be used to construct a perpetual motion machine of the second kind
      <3> This contradicts the Second Law of Thermodynamics
      ∴ No such engine can exist
      □
    }

    // Commentary: This theorem demonstrates the impossibility of creating a perpetual
    // motion machine, which is a direct consequence of the Second Law of Thermodynamics.
    // It shows that no heat engine can be more efficient than a Carnot engine operating
    // between the same temperature reservoirs.
  }

  // Practical applications and examples
  EXAMPLES {
    EXAMPLE IdealGasExpansion {
      LET sys = System {
        boundary = CLOSED,
        state_variables = StateVariables {
          T = 300,  // K
          P = 101325,  // Pa (1 atm)
          V = 0.0224,  // m^3 (22.4 L)
          U = 3744.6,  // J (for monatomic ideal gas)
          S = 130.6,  // J/K
          H = 3970.8,  // J
          G = 3578.0   // J
        },
        composition = { "Argon" -> 0.039948 }  // kg (1 mol)
      }

      LET expanded_sys = IsothermalProcess(sys, 0.0224)  // Double the volume

      ASSERT expanded_sys.state_variables.P ≈ 50662.5  // Pa (0.5 atm)
      ASSERT expanded_sys.state_variables.U = sys.state_variables.U  // Internal energy unchanged in isothermal process
      ASSERT expanded_sys.state_variables.S > sys.state_variables.S  // Entropy increases

      // Work done by the gas during expansion:
      LET W = sys.state_variables.P * sys.state_variables.V * LN(2)
      ASSERT W ≈ 1585.2  // J

      // Heat absorbed by the gas (equal to work for isothermal process):
      LET Q = W
      ASSERT Q ≈ 1585.2  // J

      // Entropy change:
      LET ΔS = EntropyChange(sys.state_variables, expanded_sys.state_variables)
      ASSERT ΔS ≈ Q / sys.state_variables.T ≈ 5.284  // J/K
    }

    // Commentary: This example demonstrates the application of thermodynamic
    // principles to a practical scenario - the isothermal expansion of an ideal gas.
    // It shows how to calculate key quantities like work, heat transfer, and entropy
    // change, and illustrates the relationships between different state variables.

    EXAMPLE CarnotCycle {
      LET engine = HeatEngine {
        hot_reservoir = 600,  // K
        cold_reservoir = 300,  // K
        cycle = [ISOTHERMAL, ADIABATIC, ISOTHERMAL, ADIABATIC],
        efficiency = carnot_efficiency(600, 300)
      }

      ASSERT engine.efficiency = 0.5  // 50% efficient

      // For 1 mol of ideal monatomic gas (Argon):
      LET sys = System {
        boundary = CLOSED,
        state_variables = StateVariables {
          T = 600,  // K
          P = 202650,  // Pa (2 atm)
          V = 0.0224,  // m^3
          U = 7489.2,  // J
          S = 144.4,  // J/K
          H = 7941.6,  // J
          G = 7156.0   // J
        },
        composition = { "Argon" -> 0.039948 }  // kg (1 mol)
      }

      // Step 1: Isothermal expansion at T_h
      LET sys1 = IsothermalProcess(sys, 0.0224)
      // Step 2: Adiabatic expansion
      LET sys2 = AdiabaticProcess(sys1, 5/3, 0.0224)
      // Step 3: Isothermal compression at T_c
      LET sys3 = IsothermalProcess(sys2, -0.0336)
      // Step 4: Adiabatic compression
      LET sys4 = AdiabaticProcess(sys3, 5/3, -0.0336)

      ASSERT sys4.state_variables ≈ sys.state_variables  // Cycle returns to initial state

      LET Q_h = 3170.4  // J (heat absorbed from hot reservoir)
      LET Q_c = 1585.2  // J (heat rejected to cold reservoir)
      LET W = Q_h - Q_c  // Net work done by the engine

      ASSERT W ≈ 1585.2  // J
      ASSERT W / Q_h